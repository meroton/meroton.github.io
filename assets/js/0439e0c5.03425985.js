"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9175],{396:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=t(5893),a=t(1151),r=t(4866),s=t(5162);const o={},c="Automatically reformat all commits on a branch",l={id:"practice/rebase-and-reformat-git-branches-automatically",title:"Automatically reformat all commits on a branch",description:"Preliminaries",source:"@site/docs/practice/rebase-and-reformat-git-branches-automatically.md",sourceDirName:"practice",slug:"/practice/rebase-and-reformat-git-branches-automatically",permalink:"/docs/practice/rebase-and-reformat-git-branches-automatically",draft:!1,unlisted:!1,editUrl:"https://github.com/meroton/docs/edit/main/docs/practice/rebase-and-reformat-git-branches-automatically.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Components of a Build",permalink:"/docs/theory/components-of-a-build"},next:{title:"Tips and Tricks",permalink:"/docs/tips/"}},h={},d=[{value:"Preliminaries",id:"preliminaries",level:2},{value:"Unix philosophy",id:"unix-philosophy",level:3},{value:"Example commits",id:"example-commits",level:3},{value:"First wave: reformat",id:"first-wave-reformat",level:2},{value:"Reformat each commit",id:"reformat-each-commit",level:3},{value:"Rebasing",id:"rebasing",level:3},{value:"Second wave: fixup",id:"second-wave-fixup",level:2},{value:"Why not <code>--autosquash</code>?",id:"why-not---autosquash",level:3},{value:"Third wave: squash reverts",id:"third-wave-squash-reverts",level:2},{value:"Squash messages",id:"squash-messages",level:3},{value:"Automate the Squash messages",id:"automate-the-squash-messages",level:3},{value:"Result",id:"result",level:3},{value:"Author date?",id:"author-date",level:3},{value:"Oneliners",id:"oneliners",level:2},{value:"Extra rebase tips",id:"extra-rebase-tips",level:2},{value:"Cache work when running tests on all commits",id:"cache-work-when-running-tests-on-all-commits",level:3},{value:"Help, I&#39;m lost",id:"help-im-lost",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"automatically-reformat-all-commits-on-a-branch",children:"Automatically reformat all commits on a branch"}),"\n",(0,i.jsx)(n.h2,{id:"preliminaries",children:"Preliminaries"}),"\n",(0,i.jsxs)(n.p,{children:["If you have a formatter tool\nthat can rewrite your code\nyou can run it automatically on all unmerged commits.\nThis will show you how to script ",(0,i.jsx)(n.code,{children:"git-rebase"}),"\nto do so without any conflicts."]}),"\n",(0,i.jsx)(n.p,{children:"There are two ways to do it manually, forward or backward.\nThe forward pass amends each commit\nand deals with the conflicts when stepping to the next commit.\nIn contrast the backwards pass, formats each commit from the end,\nwhich will avoid conflicts but for long commit chains it can be almost as boring."}),"\n",(0,i.jsx)(n.p,{children:"This pattern comes up when working with long-lived feature branches,\nor tasks that were almost done, and then pre-empted by other prioritized work.\nTo make sure that all commits are up to the latest standard\nyou can run the oneliner(s) from the end of this document."}),"\n",(0,i.jsx)(n.h3,{id:"unix-philosophy",children:"Unix philosophy"}),"\n",(0,i.jsxs)(n.p,{children:["This guide shows a powerful ",(0,i.jsx)(n.code,{children:"git"})," workflow,\nas it is designed with the ",(0,i.jsx)(n.em,{children:"Unix philosophy"})," much can be automated and scripted.\nWe use ",(0,i.jsx)(n.code,{children:"vim"})," as a scriptable editor,\nas it is the author's daily driver,\nbut any editor can be used.\nAn interactive editor is better than simply using ",(0,i.jsx)(n.code,{children:"awk"})," or ",(0,i.jsx)(n.code,{children:"sed"}),",\nas it allows you to step through the process\nand augment it to fit your needs."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are a ",(0,i.jsx)(n.code,{children:"vim"})," user we hope this can brighten your day\nand give you another arrow or two to your quiver."]}),"\n",(0,i.jsx)(n.h3,{id:"example-commits",children:"Example commits"}),"\n",(0,i.jsx)(n.p,{children:"Starting off we have three example commits that we will manipulate:"}),"\n",(0,i.jsx)(n.p,{children:"aaa My amazing feature\nbbb Other complimentary work\nccc Fix annoying bug"}),"\n",(0,i.jsx)(n.p,{children:"They contain serious work, but the distracted author forgot to run some linters,\nor the main branch added more lint requirements after the feature work was started.\nWe value pristine commits that we can merge,\nand all commits should pass all the tests,\nto help with bisecting potential errors later."}),"\n",(0,i.jsx)(n.h2,{id:"first-wave-reformat",children:"First wave: reformat"}),"\n",(0,i.jsx)(n.h3,{id:"reformat-each-commit",children:"Reformat each commit"}),"\n",(0,i.jsx)(n.p,{children:"We start with a script that we want to run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"title=reformat.sh",children:"#!/bin/sh\n\n# Formatters and fixers go here.\n# Replace with your tools of choice! rustfmt, gofmt, black, ...\n./run-all-linters-and-autofixers.sh\n\n# Add a new commit with the changes and revert it again.\ngit add -u\ngit commit --allow-empty --fixup HEAD\n# 'git-revert' does not support '--allow-empty'.\ngit revert --no-commit HEAD\ngit commit --allow-empty --no-edit\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rebasing",children:"Rebasing"}),"\n",(0,i.jsx)(n.p,{children:"The first step is to run the formatting script for every commit:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ git rebase -i --exec=./reformat.sh origin/main\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This opens the interactive rebase todo list with the ",(0,i.jsx)(n.code,{children:"execute"})," commands filled in:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"title=.git/rebase-merge/git-rebase-todo",children:"pick aaa My amazing feature\nexec ./reformat.sh\npick bbb Other complimentary work\nexec ./reformat.sh\npick ccc Fix annoying bug\nexec ./reformat.sh\n\n# Rebase aaa..ccc onto deadbeef (3 commands)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec <command> = run command (the rest of the line) using shell\n# ...\n\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["If you made a mistake and want to abort the rebase, without applying any commands exit the editor with a non-zero exit code.\nin ",(0,i.jsx)(n.code,{children:"vim"})," you can do that with ",(0,i.jsx)(n.code,{children:":cq"}),"."]}),(0,i.jsxs)(n.p,{children:["To optimize the save-and-quit from ",(0,i.jsx)(n.code,{children:":wq<enter>"})," you can instead press ",(0,i.jsx)(n.code,{children:"ZZ"})," in normal mode."]})]}),"\n",(0,i.jsx)(n.p,{children:"This will create two additional commits for each original,\nhere denoted with helpful commit hash prefixes.\nThey are grouped together into the final commits that we want to create."}),"\n",(0,i.jsxs)(r.Z,{children:[(0,i.jsx)(s.Z,{value:"reformated",label:"1: Reformated",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'aaa My amazing feature\naa1 fixup! My amazing feature\n\naa2 Revert "fixup! My amazing feature"\nbbb Other complimentary work\nbb1 fixup! Other complimentary work\n\nbb2 Revert "fixup! Other complimentary work"\nccc Fix annoying bug\ncc1 fixup! Fix annoying bug\n\ncc2 Revert "fixup! Fix annoying bug"\n'})})}),(0,i.jsx)(s.Z,{value:"original",label:"Original",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aaa My amazing feature\n\n\n\nbbb Other complimentary work\n\n\n\nccc Fix annoying bug\n\n\n\n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["The reverts make sure that whatever was broken in each commit is restored,\nso the next commit applies cleanly.\n",(0,i.jsx)(n.code,{children:"aaa"}),", ",(0,i.jsx)(n.code,{children:"aa1"})," and ",(0,i.jsx)(n.code,{children:"aa2"})," are the old unit of a commit.\nThe desired goal is to have the reformatted ",(0,i.jsx)(n.code,{children:"aaa"}),"\nand move the unit-boundary after the reformatting fixup."]}),"\n",(0,i.jsxs)(n.p,{children:["The desired units are: first ",(0,i.jsx)(n.code,{children:"aaa"}),", ",(0,i.jsx)(n.code,{children:"aa1"}),",\nthen ",(0,i.jsx)(n.code,{children:"aa2"}),", ",(0,i.jsx)(n.code,{children:"bbb"}),", ",(0,i.jsx)(n.code,{children:"bb1"}),"\nand ",(0,i.jsx)(n.code,{children:"bb2"}),", ",(0,i.jsx)(n.code,{children:"ccc"}),", ",(0,i.jsx)(n.code,{children:"cc1"})," last."]}),"\n",(0,i.jsxs)(n.p,{children:["Notice that the final revert ",(0,i.jsx)(n.code,{children:"cc2"}),"\nis not needed and must be discard at some point.\nWe will do it in the second wave,\nbut you could do it whenever.\n(At this point it is possible to just run ",(0,i.jsx)(n.code,{children:"git checkout HEAD~1"}),".\nif you step through this manually it is the most pragmatic solution.)"]}),"\n",(0,i.jsx)(n.h2,{id:"second-wave-fixup",children:"Second wave: fixup"}),"\n",(0,i.jsx)(n.p,{children:"We proceed to the first fixup stage."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"git rebase -i origin/main\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"title=.git/rebase-merge/git-rebase-todo",children:'pick aaa My amazing feature\npick aa1 fixup! My amazing feature\npick aa2 Revert "fixup! My amazing feature"\npick bbb Other complimentary work\npick bb1 fixup! Other complimentary work\npick bb2 Revert "fixup! Other complimentary work"\npick ccc Fix annoying bug\npick cc1 fixup! Fix annoying bug\npick cc2 Revert "fixup! Fix annoying bug"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Which is modified with the following search-and-replace in ",(0,i.jsx)(n.code,{children:"vim"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:":g/^\\w* \\w* fixup!/s/^pick/fixup/\n^                                 : command\n ^                                : for all lines\n  ^               ^               : that match\n   ^^^^^^^^^^^^^^                 : Regexp: <beginning of line><word> <word>fixup!\n                   ^^     ^     ^ : search and replace\n                     ^^^^^        : Regexp: <beginning of line>pick\n                           ^^^^   : replace with 'fixup'\n"})}),"\n",(0,i.jsx)(n.p,{children:"Into:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"title=.git/rebase-merge/git-rebase-todo",children:'pick aaa My amazing feature\nfixup aa1 fixup! My amazing feature\npick aa2 Revert "fixup! My amazing feature"\npick bbb Other complimentary work\nfixup bb1 fixup! Other complimentary work\npick bb2 Revert "fixup! Other complimentary work"\npick ccc Fix annoying bug\nfixup cc1 fixup! Fix annoying bug\npick cc2 Revert "fixup! Fix annoying bug"\n'})}),"\n",(0,i.jsx)(n.p,{children:"This gives us:"}),"\n",(0,i.jsxs)(r.Z,{children:[(0,i.jsx)(s.Z,{value:"fixed-up",label:"2: Fixed-up",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Aaa My amazing feature\n\n\naa2 Revert "fixup! My amazing feature"\nBbb Other complimentary work\n\n\nbb2 Revert "fixup! Other complimentary work"\nCcc Fix annoying bug\n\n\ncc2 Revert "fixup! Fix annoying bug"\n'})})}),(0,i.jsx)(s.Z,{value:"reformated",label:"1: Reformated",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'aaa My amazing feature\naa1 fixup! My amazing feature\n\naa2 Revert "fixup! My amazing feature"\nbbb Other complimentary work\nbb1 fixup! Other complimentary work\n\nbb2 Revert "fixup! Other complimentary work"\nccc Fix annoying bug\ncc1 fixup! Fix annoying bug\n\ncc2 Revert "fixup! Fix annoying bug"\n'})})}),(0,i.jsx)(s.Z,{value:"original",label:"Original",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aaa My amazing feature\n\n\n\nbbb Other complimentary work\n\n\n\nccc Fix annoying bug\n\n\n\n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"aaa"})," and ",(0,i.jsx)(n.code,{children:"aa1"})," are combined into a single well-formatted commit ",(0,i.jsx)(n.code,{children:"Aaa"}),",\nbut the formatting is removed in the following ",(0,i.jsx)(n.code,{children:"aa2"}),",\nso the original ",(0,i.jsx)(n.code,{children:"bbb"})," still applies (but it is folded into ",(0,i.jsx)(n.code,{children:"Bbb"}),")."]}),"\n",(0,i.jsxs)(n.h3,{id:"why-not---autosquash",children:["Why not ",(0,i.jsx)(n.code,{children:"--autosquash"}),"?"]}),"\n",(0,i.jsxs)(n.p,{children:["This is a good question, the ",(0,i.jsx)(n.code,{children:"--autosquash"})," flag has long been a staple for me.\nBut it does not work if there are duplicated commit messages in the commit chain,\nwhich is a general problem with such messages\nnot specific to this workflow."]}),"\n",(0,i.jsxs)(n.p,{children:['A less-than-imaginative "tidy up" commit message may trip up this flow.\nWhere all "fixup! tidy up" commits will be applied to the first "tidy up" commit.\nTo be robust, we do it in vim directly.\nIt is a simple search and replace,\nand serves as the most complete example.\nIf you do not have duplicated commit messages, you can use ',(0,i.jsx)(n.code,{children:"--autosquash"})," instead.\nJust note that the code to ",(0,i.jsx)(n.em,{children:"verify"})," that the messages are unique,\nis more complex that this workaround."]}),"\n",(0,i.jsx)(n.h2,{id:"third-wave-squash-reverts",children:"Third wave: squash reverts"}),"\n",(0,i.jsxs)(n.p,{children:["Now we want to squash each pair of ",(0,i.jsx)(n.code,{children:"Revert-fixup"})," and ",(0,i.jsx)(n.code,{children:"real-commit"}),"\ninto just ",(0,i.jsx)(n.code,{children:"real-commit"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This is a little tricker than before,\nso for good measure we check all the lines we want.\nThis is shows that you can reuse the last search pattern in the replacement later,\nbut has not practical value for the automation."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["If you use ",(0,i.jsx)(n.em,{children:"neovim"})," you should use ",(0,i.jsx)(n.code,{children:":set inccommand=split"}),"\nwhich will show the search-and-replacement that would be applied as you type!"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'(vim) /^pick \\w* Revert "fixup!\n      ^                         : search\n       ^                        : Regexp: <beginning of line>pick <word> Revert "fixup!\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This just searches for the revert-fixup commits,\nto illustrate that the ",(0,i.jsx)(n.code,{children:":g"})," command can use the last search,\nthis is useful when writing complex regular expressions\nand to check that they work."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'(vim) :g//normal! j0ces\n      ^                 : command\n       ^                : for all lines\n        ^^              : that match (the last search pattern!)\n          ^^^^^^        : execute normal mode commands\n                  ^^    : go down and to the first column\n                    ^^  : change until the end of the word\n                      ^ : to "s", short for squash.\n'})}),"\n",(0,i.jsx)(n.p,{children:"Putting it together:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"git rebase -i origin/main\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"title=.git/rebase-merge/git-rebase-todo",children:'pick Aaa My amazing feature\npick aa2 Revert "fixup! My amazing feature"\npick Bbb Other complimentary work\npick bb2 Revert "fixup! Other complimentary work"\npick Ccc Fix annoying bug\npick cc2 Revert "fixup! Fix annoying bug"\n\n# Rebase Aaa..cc2 onto deadbeef (3 commands)\n# ...\n'})}),"\n",(0,i.jsx)(n.p,{children:"First search-and-replace the pick of revert commits to squashes,\nbut squash the next line into the revert,\nthen remove all comment lines\nand finally delete the two last lines (a blank line and the final commit)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:":g/^pick \\w* Revert \"fixup!/normal! j0ces\n:g/^#/d'\nGdk\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This yields the final squashes and ",(0,i.jsx)(n.code,{children:"cc2"})," is gone:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"title=.git/rebase-merge/git-rebase-todo",children:'pick Aaa My amazing feature\npick aa2 Revert "fixup! My amazing feature"\nsquash Bbb Other complimentary work\npick bb2 Revert "fixup! Other complimentary work"\nsquash Ccc Fix annoying bug\n'})}),"\n",(0,i.jsx)(n.h3,{id:"squash-messages",children:"Squash messages"}),"\n",(0,i.jsx)(n.p,{children:"We have now done the hard part,\nthe expected commits are formed with each squash.\nHowever the message needs to be edited,\nwhich is a huge time sink if done manually.\nA commit message squash looks like this (with line numbers):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"title=.git/COMMIT_EDITMSG showLineNumbers",children:'# This is a combination of 2 commits.\n# This is the 1st commit message:\n\nRevert "fixup! My amazing feature"\n\nThis reverts commits aa1\n\n# This is the commit message #2:\n\nOther complimentary work\n'})}),"\n",(0,i.jsx)(n.p,{children:"The mechanical solution is to delete the first 9 lines."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(vim) :1,9d\n      ^     : command\n       ^^^  : line 1 through 9\n          ^ : delete\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This comes from the ",(0,i.jsx)(n.code,{children:"ed"})," heritage, and can use the same command in ",(0,i.jsx)(n.code,{children:"sed"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"automate-the-squash-messages",children:"Automate the Squash messages"}),"\n",(0,i.jsxs)(n.p,{children:["Thankfully the venerable Unix tools allow us to automate this.\nWe do not need a hands-on-keyboard editor,\nbut ",(0,i.jsx)(n.code,{children:"sed"}),", or ",(0,i.jsx)(n.code,{children:"ed"})," if you are frisky,\ncan do it for us."]}),"\n",(0,i.jsx)(n.p,{children:"We can experiment with a small file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ seq 9 > test.file\n$ echo \"10: abc\" >> test.file\n$ wc -l test.file\n10 test.file\n\n$ sed '1,9d' test.file\n10: abc\n\n# Now remove them from the file itself\n$ sed -i '1,9d' test.file\n$ cat test.file\n10: abc\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This is the editor that we will use when rebasing.\nGit allows us to set ",(0,i.jsx)(n.code,{children:"$EDITOR"})," to edit the commit messages,\nand ",(0,i.jsx)(n.code,{children:"$GIT_SEQUENCE_EDITOR"})," to manipulate the interactive rebasing commands.\nIf the sequence editor is not set ",(0,i.jsx)(n.code,{children:"git"})," will edit the rebase-todo file with ",(0,i.jsx)(n.code,{children:"$EDITOR"})," as well,\nleading to predictable but unwanted results."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'$ env                         \\\n    GIT_SEQUENCE_EDITOR="vim" \\\n    EDITOR="sed \'1,9d\'"       \\\n    git rebase -i origin/main\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now search again and rewrite the squash commands.\nDo not forget to delete the trailing stuff."}),"\n",(0,i.jsxs)(n.p,{children:["To automate the entire wave with the ",(0,i.jsx)(n.code,{children:"vim"})," commands\nis left as an exercise to the reader :)."]}),"\n",(0,i.jsx)(n.p,{children:"Finally, smile as you close the editor and watch git's messages fly."}),"\n",(0,i.jsx)(n.h3,{id:"result",children:"Result"}),"\n",(0,i.jsxs)(r.Z,{children:[(0,i.jsx)(s.Z,{value:"fully-squashed",label:"3: Fully-squashed",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Aaa My amazing feature\n\n\n\nBBb Other complimentary work\n\n\n\nCCc Fix annoying bug\n\n\n\n"})})}),(0,i.jsx)(s.Z,{value:"fixed-up",label:"2: Fixed-up",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Aaa My amazing feature\n\n\naa2 Revert "fixup! My amazing feature"\nBbb Other complimentary work\n\n\nbb2 Revert "fixup! Other complimentary work"\nCcc Fix annoying bug\n\n\ncc2 Revert "fixup! Fix annoying bug"\n'})})}),(0,i.jsx)(s.Z,{value:"reformated",label:"1: Reformated",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'aaa My amazing feature\naa1 fixup! My amazing feature\n\naa2 Revert "fixup! My amazing feature"\nbbb Other complimentary work\nbb1 fixup! Other complimentary work\n\nbb2 Revert "fixup! Other complimentary work"\nccc Fix annoying bug\ncc1 fixup! Fix annoying bug\n\ncc2 Revert "fixup! Fix annoying bug"\n'})})}),(0,i.jsx)(s.Z,{value:"original",label:"Original",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"aaa My amazing feature\n\n\n\nbbb Other complimentary work\n\n\n\nccc Fix annoying bug\n\n\n\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"author-date",children:"Author date?"}),"\n",(0,i.jsxs)(n.p,{children:["We have not developed the ",(0,i.jsx)(n.em,{children:"incantation"}),", ",(0,i.jsx)(n.code,{children:"git-rebase"})," command,\nto preserve the author date from the original commits.\nBut it is an interesting problem that we will address next."]}),"\n",(0,i.jsxs)(n.p,{children:["In short the rebase-squash in the ",(0,i.jsx)(n.em,{children:"third wave"}),"\nwill reset the author time, to the time of the revert.\nHere a ",(0,i.jsx)(n.code,{children:"x git commit --amend --time=<time of the original commit in the squash>"}),"\nor ",(0,i.jsx)(n.code,{children:"x git commit --amend --reuse-message=<original commit hash>"}),"\nshould do the trick."]}),"\n",(0,i.jsx)(n.p,{children:"Ta Da!"}),"\n",(0,i.jsx)(n.p,{children:"That is it, you now have transformed all the commits in your commit chain."}),"\n",(0,i.jsx)(n.h2,{id:"oneliners",children:"Oneliners"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have done it manually\nand understand what happens,\nwe can automate all the vim steps."}),"\n",(0,i.jsx)(n.p,{children:"First wave:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'$ env                          \\\n    GIT_SEQUENCE_EDITOR="true" \\\n    git rebase -i origin/main --exec ./reformat.sh\n'})}),"\n",(0,i.jsx)(n.p,{children:"Second wave:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ env                                                             \\\n    GIT_SEQUENCE_EDITOR=\"vim +'g/^\\w* \\w* fixup!/s/^pick/fixup/'\" \\\n    git rebase -i origin/main\n"})}),"\n",(0,i.jsx)(n.p,{children:"Third wave:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ env                                                                                               \\\n    EDITOR=\"sed -i '1,9d'\"                                                                          \\\n    GIT_SEQUENCE_EDITOR=\"vim +'g/^#/d' +'normal! Gdk' +'g/^pick \\w* Revert \\\"fixup!/normal! j0ces'\" \\\n    git rebase -i origin/main\n#                            ^         ^              ^ : multiple commands\n#                              ^^^^^^                   : remove all comments lines\n#                                        ^^^^^^^^^^^    : delete the last two lines\n# TODO: Preserve author time\n"})}),"\n",(0,i.jsx)(n.h2,{id:"extra-rebase-tips",children:"Extra rebase tips"}),"\n",(0,i.jsx)(n.p,{children:"From frequent rebasers here are two tips\nto help you rebase quickly."}),"\n",(0,i.jsx)(n.h3,{id:"cache-work-when-running-tests-on-all-commits",children:"Cache work when running tests on all commits"}),"\n",(0,i.jsxs)(n.p,{children:["You can use a simple cache when executing tests on all commits.\nWhich allows you to loop through the commits multiple times,\nand only re-run tests if a commit has changed.\nThis is ",(0,i.jsx)(n.em,{children:"very"})," fast, but has all the limitations of cache management."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"title=cache",children:'#!/bin/sh\n\nCACHE=./.user/cache/\nmkdir -p "$CACHE"\n\nset -eu\n\nlookup () {\n    key=$1; shift\n    test -f "$CACHE/$key"\n}\n\ncache () {\n    key=$1; shift\n    touch "$CACHE/$key"\n}\n\nkey="$(git rev-parse HEAD)"\nlookup "$key" && { echo "cached $key"; exit 0; }\n"$@"\n\ncache "$key"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can now execute ",(0,i.jsx)(n.code,{children:"reformat.sh"})," in the interactive rebase todo-editing window:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(vim) :g/pick/normal! ox ./cache ./reformat.sh\n"})}),"\n",(0,i.jsx)(n.h3,{id:"help-im-lost",children:"Help, I'm lost"}),"\n",(0,i.jsxs)(n.p,{children:["You can always drop a branch before rewriting,\nto avoid digging through ",(0,i.jsx)(n.code,{children:"git-reflog"})," to find where you were.\nJulia Evans explains this and many other facets of a rebase-based workflow on ",(0,i.jsx)(n.a,{href:"https://jvns.ca/blog/2023/11/06/rebasing-what-can-go-wrong-/#undoing-a-rebase-is-hard",children:"her blog"}),",\nwhich is very informative."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ git branch reformat-$(date)\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>s});t(7294);var i=t(6010);const a={tabItem:"tabItem_Ymn6"};var r=t(5893);function s(e){let{children:n,hidden:t,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.Z)(a.tabItem,s),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>v});var i=t(7294),a=t(6010),r=t(2466),s=t(6550),o=t(469),c=t(1980),l=t(7392),h=t(12);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:a}}=e;return{value:n,label:t,attributes:i,default:a}}))}(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=u(e),[s,c]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[l,d]=p({queryString:t,groupId:a}),[x,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,h.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),g=(()=>{const e=l??x;return m({value:e,tabValues:r})?e:null})();(0,o.Z)((()=>{g&&c(g)}),[g]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),f(e)}),[d,f,r]),tabValues:r}}var f=t(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(5893);function w(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.o5)(),h=e=>{const n=e.currentTarget,t=c.indexOf(n),a=o[t].value;a!==i&&(l(n),s(a))},d=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>c.push(e),onKeyDown:d,onClick:h,...r,className:(0,a.Z)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function y(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,a.Z)("tabs-container",g.tabList),children:[(0,b.jsx)(w,{...e,...n}),(0,b.jsx)(j,{...e,...n})]})}function v(e){const n=(0,f.Z)();return(0,b.jsx)(y,{...e,children:d(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var i=t(7294);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);