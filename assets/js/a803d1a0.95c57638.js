"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8680],{3899:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(5893),i=t(1151);const s={title:"IV Trying to Implement Unmountat",sidebar_position:4},r='Try to create "unmountat" with the new Linux mount API',a={id:"improved-chroot-in-buildbarn/implementing-unmountat",title:"IV Trying to Implement Unmountat",description:"This continues from [implementing mountat with the new Linux mount API]",source:"@site/docs/improved-chroot-in-buildbarn/implementing-unmountat.md",sourceDirName:"improved-chroot-in-buildbarn",slug:"/improved-chroot-in-buildbarn/implementing-unmountat",permalink:"/docs/improved-chroot-in-buildbarn/implementing-unmountat",draft:!1,unlisted:!1,editUrl:"https://github.com/meroton/docs/edit/main/docs/improved-chroot-in-buildbarn/implementing-unmountat.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"IV Trying to Implement Unmountat",sidebar_position:4},sidebar:"sidebar",previous:{title:"III Implementing Mountat",permalink:"/docs/improved-chroot-in-buildbarn/implementing-mountat"},next:{title:"V Integrating Mountat in Buildbarn",permalink:"/docs/improved-chroot-in-buildbarn/integrating-mountat"}},c={},l=[{value:"The new mount API",id:"the-new-mount-api",level:2},{value:"Move mount",id:"move-mount",level:2},{value:"Pick up the mount",id:"pick-up-the-mount",level:2},{value:"EINVAL",id:"einval",level:2},{value:"Copy mount",id:"copy-mount",level:2},{value:"Further investigation",id:"further-investigation",level:2},{value:"Acceptable solution: relative unmount",id:"acceptable-solution-relative-unmount",level:2},{value:"Request of the audience",id:"request-of-the-audience",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"try-to-create-unmountat-with-the-new-linux-mount-api",children:'Try to create "unmountat" with the new Linux mount API'}),"\n",(0,o.jsxs)(n.p,{children:["This continues from ",(0,o.jsx)(n.a,{href:"/docs/improved-chroot-in-Buildbarn/implementing-mountat/",children:"implementing mountat with the new Linux mount API"}),"\nin an effort to improve ",(0,o.jsx)(n.a,{href:"/docs/improved-chroot-in-Buildbarn/",children:"chroot in Buildbarn"}),"\nand mount the ",(0,o.jsx)(n.code,{children:"/proc"})," and ",(0,o.jsx)(n.code,{children:"/sys"})," filesystem in the input root for ",(0,o.jsx)(n.code,{children:"REAPI"})," ",(0,o.jsx)(n.em,{children:"actions"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"the-new-mount-api",children:"The new mount API"}),"\n",(0,o.jsxs)(n.p,{children:["A short summary, see ",(0,o.jsx)(n.a,{href:"/docs/improved-chroot-in-Buildbarn/implementing-mountat/",children:"implementing mountat"})," for more background."]}),"\n",(0,o.jsx)(n.p,{children:'David Howells at Redhat the "new mount API" with several new syscalls\nprimarily used to speed up work with namespaces and moving mounts back and forth.\nThe benefit (for us) is that it allows relative paths.'}),"\n",(0,o.jsx)(n.p,{children:"Announcement:"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Six (or seven) new system calls for filesystem mounting\n",(0,o.jsx)(n.a,{href:"https://lwn.net/Articles/759499/",children:"https://lwn.net/Articles/759499/"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Note that this is not the final API but describes the background well.\nThe ",(0,o.jsx)(n.code,{children:"write"})," call will not be used at all.\nLater patch sets and the man pages explain the API better,\nbut some vagaries remain as we will see later."]}),"\n",(0,o.jsx)(n.p,{children:"Man pages:"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Add manpage for fsopen(2), fspick(2) and fsmount(2)\n",(0,o.jsx)(n.a,{href:"https://lwn.net/Articles/802096/",children:"https://lwn.net/Articles/802096/"})]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["[MANPAGE PATCH] Add manpages for move_mount(2) and open_tree(2)\n",(0,o.jsx)(n.a,{href:"https://lore.kernel.org/linux-man/15488.1531263249@warthog.procyon.org.uk/t/",children:"https://lore.kernel.org/linux-man/15488.1531263249@warthog.procyon.org.uk/t/"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Commit information:"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["vfs: syscall: Add fsconfig() for configuring and managing a context \xb7 torvalds/linux@ecdab15\n",(0,o.jsx)(n.a,{href:"https://github.com/torvalds/linux/commit/ecdab150fddb42fe6a739335257949220033b782",children:"https://github.com/torvalds/linux/commit/ecdab150fddb42fe6a739335257949220033b782"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Unfortunately I have not found the official man pages anywhere.\nSo the risk of this article being out-of-date is looming.\nJust as the announcement gave examples with ",(0,o.jsx)(n.code,{children:"write"})," that does not work with the real code."]}),"\n",(0,o.jsx)(n.p,{children:"Quote the manpages:"}),"\n",(0,o.jsx)(n.p,{children:"move_mount () call moves a mount from one place to another;\nit can also be used to attach an\nunattached mount created by\nfsmount() or open_tree() with OPEN_TREE_CLONE ."}),"\n",(0,o.jsx)(n.p,{children:"move_mount () is called repeatedly with a file descriptor that refers to a mount object,\nthen the object will be attached/moved the first time and then moved again and\nagain and again, detaching it from the previous mountpoint each time."}),"\n",(0,o.jsx)(n.p,{children:'This is where we start to implement "unmountat",\nthe idea is to'}),"\n",(0,o.jsx)(n.p,{children:"A1: pick up the mount from the directory\nA2: delete the mount"}),"\n",(0,o.jsx)(n.p,{children:"B1: pick up the mount from the directory\nB2: move it somewhere else\nB3: unmount it from there"}),"\n",(0,o.jsxs)(n.p,{children:["C1: emulate ",(0,o.jsx)(n.code,{children:"umountat"})," with ",(0,o.jsx)(n.code,{children:"fchdir"})," + ",(0,o.jsx)(n.code,{children:"umount"})]}),"\n",(0,o.jsxs)(n.p,{children:['The first is what we would like to do, but it does not work.\nThe second is a half-measure that allows us to use a well-known absolute path\nand use an "Indiana-Jones swap" technique\nbefore unmounting the absolute path with good-old ',(0,o.jsx)(n.code,{children:"unmount"}),".\nBut that does not work either.\nSo we use the third idea,\nwhich does not use the new API at all."]}),"\n",(0,o.jsx)(n.h2,{id:"move-mount",children:"Move mount"}),"\n",(0,o.jsx)(n.p,{children:"We try the given examples:"}),"\n",(0,o.jsx)(n.p,{children:"EXAMPLES\nThe move_mount ()function can be used like the following:"}),"\n",(0,o.jsx)(n.p,{children:'move_mount(AT_FDCWD, "/a", AT_FDCWD, "/b", 0);'}),"\n",(0,o.jsx)(n.p,{children:'This would move the object mounted on "/a" to "/b".  It can also be used in\nconjunction with open_tree(2) open(2) with O_PATH :'}),"\n",(0,o.jsx)(n.p,{children:'fd = open_tree(AT_FDCWD, "/mnt", 0);\nmove_mount(fd, "", AT_FDCWD, "/mnt2", MOVE_MOUNT_F_EMPTY_PATH);\nmove_mount(fd, "", AT_FDCWD, "/mnt3", MOVE_MOUNT_F_EMPTY_PATH);\nmove_mount(fd, "", AT_FDCWD, "/mnt4", MOVE_MOUNT_F_EMPTY_PATH);'}),"\n",(0,o.jsx)(n.p,{children:'This would attach the path point for "/mnt" to fd, then it would move the\nmount to "/mnt2", then move it to "/mnt3" and finally to "/mnt4".'}),"\n",(0,o.jsxs)(n.p,{children:["We know that ",(0,o.jsx)(n.code,{children:"move_mount"})," can be used to place a ",(0,o.jsx)(n.em,{children:"mount object"})," on a mount point,\nthat is how ",(0,o.jsx)(n.a,{href:"https://github.com/meroton/prototype-mountat/blob/main/c-prototypes/mountat_dfd.c#L52",children:"mountat"})," is implemented, here is ",(0,o.jsx)(n.a,{href:"https://github.com/torvalds/linux/blob/89bf6209cad66214d3774dac86b6bbf2aec6a30d/samples/vfs/test-fsmount.c#L103",children:"official reference code"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"But these examples do not seem to work."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'/* Move from a source directory file descriptor `s_dfd`\n * to the destination `d_dfd`.\n */\n\n// Try to use \'move_mount\' directly on the mount point.\nmove_mount(s_dfd, mountpoint, d_dfd, mountpoint, 0);\n//     strace: move_mount(3, "proc", 6, "proc", 0)     = -1 EINVAL (Invalid argument)\n\n// Try to use \'move_mount\' on the mount file descriptor from `fspick`.\n// Pick up, a so called, "filesystem configuration context".\nint cfd = fspick(s_dfd, mountpoint, FSPICK_NO_AUTOMOUNT | FSPICK_CLOEXEC);\nmove_mount(cfd, "", d_dfd, mountpoint, 0);\n//     strace: move_mount(7, "", 6, "proc", 0)         = -1 ENOENT (No such file or directory)\nmove_mount(cfd, "", d_dfd, mountpoint, MOVE_MOUNT_F_EMPTY_PATH);\n//     strace: move_mount(7, "", 6, "proc", MOVE_MOUNT_F_EMPTY_PATH) = -1 EINVAL (Invalid argument)\n\n// Must we create a mount again?\n// So `fspick` is equivalent to `fsopen`.\n// Additionally, the manpage says that we must reconfigure it\nfsconfig(cfd, FSCONFIG_CMD_RECONFIGURE, NULL, NULL, 0);\nint mfd = fsmount(cfd, FSMOUNT_CLOEXEC, MS_NOEXEC);\n//     strace: fsmount(5, FSMOUNT_CLOEXEC, MOUNT_ATTR_NOEXEC) = -1 EBUSY (Device or resource busy)\n// But `fsmount` fails, so this does not seem to be it.\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Either way I try I get ",(0,o.jsx)(n.code,{children:"EINVAL"})]}),"\n",(0,o.jsx)(n.p,{children:".EINVAL\nReserved flag specified in flags ."}),"\n",(0,o.jsx)(n.p,{children:"Which is not described very well."}),"\n",(0,o.jsx)(n.h2,{id:"pick-up-the-mount",children:"Pick up the mount"}),"\n",(0,o.jsxs)(n.p,{children:["With ",(0,o.jsx)(n.code,{children:"open_tree"}),":"]}),"\n",(0,o.jsx)(n.p,{children:"open_tree () picks the mount object specified by the pathname and attaches it to a new file\ndescriptor or clones it and attaches the clone to the file descriptor.  The\nresultant file descriptor is indistinguishable from one produced by\nopen(2) with O_PATH ."}),"\n",(0,o.jsx)(n.p,{children:'In the case that the mount object is cloned, the clone will be "unmounted" and\ndestroyed when the file descriptor is closed if it is not otherwise mounted\nsomewhere by calling move_mount (2).'}),"\n",(0,o.jsxs)(n.p,{children:["Just like the example above, this can be read as allowing an unmount through ",(0,o.jsx)(n.code,{children:"move_mount"}),".\nThough the primary use case is to clone a mount and move that.\nDo we need ",(0,o.jsx)(n.code,{children:"fsmount"})," in the way?"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'// And using `open_tree` gives failures for `fsconfig` directly.\nint mmmfd = open_tree(s_dfd, mountpoint, 0);\nfsconfig(mmmfd, FSCONFIG_CMD_RECONFIGURE, NULL, NULL, 0);\n//     strace: fsconfig(5, FSCONFIG_CMD_RECONFIGURE, NULL, NULL, 0) = -1 EBADF (Bad file descriptor)\n\n// Try to use \'move_mount\' on the tree file descriptor from \'open_tree\'\nint mmfd = open_tree(s_dfd, mountpoint, 0);\nmove_mount(mmfd, "", d_dfd, mountpoint, MOVE_MOUNT_F_EMPTY_PATH);\n//    strace: move_mount(8, "", 6, "proc", MOVE_MOUNT_F_EMPTY_PATH) = -1 EINVAL (Invalid argument)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["So we should not attempt to configure the mount file descriptor from ",(0,o.jsx)(n.code,{children:"fsconfig"}),",\nBut we can not move it either."]}),"\n",(0,o.jsx)(n.h2,{id:"einval",children:"EINVAL"}),"\n",(0,o.jsxs)(n.p,{children:["We are stumped by this message,\nthe next step would be to dig into the ",(0,o.jsx)(n.a,{href:"https://github.com/torvalds/linux/blob/master/fs/namespace.c#L4058",children:"source code"}),",\n",(0,o.jsx)(n.a,{href:"https://docs.kernel.org/dev-tools/gdb-kernel-debugging.html",children:"debug the kernel code in a VM"}),",\nor see if the file descriptors give more information."]}),"\n",(0,o.jsxs)(n.p,{children:["From the older documentation of ",(0,o.jsx)(n.code,{children:"fsopen"}),", there are some hints to how to find more information.\nBut we suspect that this is out-of-date,\nas the same version of the documentation wrote commands into the file descriptors,\nwhich is not how the merged code works.\nSo this is quoted with some skepticism,\nbut serves as a starting point to continue troubleshooting this."]}),"\n",(0,o.jsx)(n.p,{children:"Message Retrieval Interface"}),"\n",(0,o.jsx)(n.p,{children:"The context file descriptor may be queried for message strings at any time by\ncalling read(2) on the file descriptor.\nThis will return formatted messages that are prefixed\nto indicate their class:"}),"\n",(0,o.jsx)(n.p,{children:'"e <message>"\nAn error message string was logged.'}),"\n",(0,o.jsx)(n.p,{children:'"i <message>"\nAn informational message string was logged.'}),"\n",(0,o.jsx)(n.p,{children:'"w <message>"\nAn warning message string was logged.'}),"\n",(0,o.jsx)(n.p,{children:"Messages are removed from the queue as they're read."}),"\n",(0,o.jsx)(n.h2,{id:"copy-mount",children:"Copy mount"}),"\n",(0,o.jsx)(n.p,{children:"The only things that work with the new API is to clone the mount,\nand then move the clone.\nSo we copy the mount, but leave the original in-place.\nThat is not a workable solution for us."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'// We can successfully move a clone, but not the original mount it seems.\nint mmmfd = open_tree(s_dfd, mountpoint, OPEN_TREE_CLONE);\nmove_mount(mmmfd, "", d_dfd, mountpoint, MOVE_MOUNT_F_EMPTY_PATH);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"further-investigation",children:"Further investigation"}),"\n",(0,o.jsx)(n.p,{children:"Google does not help in finding many uses cases,\nbut there are a few emails with newer dates:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://lore.kernel.org/linux-man/159827188271.306468.16962617119460123110.stgit@warthog.procyon.org.uk/",children:"open_tree"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://lore.kernel.org/linux-man/159827189025.306468.4916341547843731338.stgit@warthog.procyon.org.uk/",children:"move_mount"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"But they have the same examples"}),"\n",(0,o.jsxs)(n.p,{children:["There is also the ",(0,o.jsx)(n.code,{children:"lxc"}),' project, which has the most code that use the new API.\nBut they do not use an "unmountat" function.']}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/lxc/lxc/blob/main/src/lxc/mount_utils.c#L291",children:"create detached mount"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/lxc/lxc/blob/main/src/lxc/mount_utils.c#L613",children:"mount_at"})}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["There is also the ",(0,o.jsx)(n.a,{href:"https://github.com/shiziwen/linux/blob/26b0332e30c7f93e780aaa054bd84e3437f84354/fs/namei.c#L2305",children:"path_unmountat"})," function in the kernel,\nbut to my reading this is part of the filesystem subsystem,\nand not plumbed through to a syscall for regular mounts."]}),"\n",(0,o.jsxs)(n.p,{children:["This is another interesting use case: ",(0,o.jsx)(n.a,{href:"https://github.com/kinvolk/nfs-mount-in-userns",children:"NFS-mount-in-user-namespace"})]}),"\n",(0,o.jsx)(n.h2,{id:"acceptable-solution-relative-unmount",children:"Acceptable solution: relative unmount"}),"\n",(0,o.jsxs)(n.p,{children:["To leave this in a some what positive note,\nwe can use a relative ",(0,o.jsx)(n.code,{children:"unmount"})," like this relative mount example from ",(0,o.jsx)(n.a,{href:"https://github.com/torvalds/linux/blob/93f5de5f648d2b1ce3540a4ac71756d4a852dc23/tools/testing/selftests/openat2/resolve_test.c#L75",children:"Linux's test"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'/* There is no mountat(2), so use chdir. */\nE_mkdirat(dfd, "mnt", 0755);\nE_fchdir(dfd);\nE_mount("tmpfs", "./mnt", "tmpfs", MS_NOSUID | MS_NODEV, "");\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This relative mount technique is acceptable for Buildbarn.\nDuring the process to patch this,\nwe realized that ",(0,o.jsx)(n.a,{href:"https://github.com/buildbarn/bb-storage/blob/ece87ab6dc2a9e1e592d2032f5a02c3694765cfc/pkg/filesystem/local_directory_unix.go#L271",children:"Buildbarn already did this"}),", :).\nSimple c-code is ",(0,o.jsx)(n.a,{href:"https://github.com/meroton/prototype-mountat/blob/main/c-prototypes/relative_mount.c",children:"available here"})," with ",(0,o.jsx)(n.a,{href:"https://github.com/meroton/prototype-mountat/blob/cmd/relative-unmount/main.go",children:"similar go code here"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-c",children:'int\nmain(int argc, char* argv[])\n{\n    char* mountpoint = "./proc";\n    if (argc < 2) {\n        exit(1);\n    }\n\n    char* initial = argv[1];\n    int dfd = openat(AT_FDCWD, initial, 0);\n    fchdir(dfd);\n    umount(mountpoint);\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"request-of-the-audience",children:"Request of the audience"}),"\n",(0,o.jsxs)(n.p,{children:["Do you know how to use the new mount API to implement ",(0,o.jsx)(n.code,{children:"unmountat"}),"?\nDo you spot any errors in our investigation, or ideas we forgot?\nPlease let us know!"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var o=t(7294);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);