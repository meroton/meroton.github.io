"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9529],{3680:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=t(5893),a=t(1151);const o={slug:"memory-adventure",title:"Memory Adventure",authors:"nils",tags:["bazel","buildbarn"]},r="Dude, where is the RAM?",s={permalink:"/blog/memory-adventure",editUrl:"https://github.com/meroton/docs/edit/main/blog/2023-11-13-memory-adventure/2023-11-13-adventure.mdx",source:"@site/blog/2023-11-13-memory-adventure/2023-11-13-adventure.mdx",title:"Memory Adventure",description:"An adventure in finding a memory thief in Starlark-land",date:"2023-11-13T00:00:00.000Z",formattedDate:"November 13, 2023",tags:[{label:"bazel",permalink:"/blog/tags/bazel"},{label:"buildbarn",permalink:"/blog/tags/buildbarn"}],readingTime:7.945,hasTruncateMarker:!1,authors:[{name:"Nils Wireklint",imageURL:"/img/nils-avatar.jpg",key:"nils"}],frontMatter:{slug:"memory-adventure",title:"Memory Adventure",authors:"nils",tags:["bazel","buildbarn"]},unlisted:!1,prevItem:{title:"Updates to Buildbarn as of November 2023",permalink:"/blog/buildbarn-updates-2023-11"},nextItem:{title:"BazelCon 2023",permalink:"/blog/bazelcon-2023"}},l={authorsImageUrls:[void 0]},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Toolbox",id:"toolbox",level:2},{value:"Expected Memory consumption",id:"expected-memory-consumption",level:2},{value:"Reported Memory Consumption",id:"reported-memory-consumption",level:2},{value:"Bazel dump --rules",id:"bazel-dump---rules",level:3},{value:"Skylark Memory Profile",id:"skylark-memory-profile",level:3},{value:"Eclipse Memory Analyzer",id:"eclipse-memory-analyzer",level:3},{value:"Build Time",id:"build-time",level:2},{value:"Pessimization with limited memory",id:"pessimization-with-limited-memory",level:2},{value:"Future work",id:"future-work",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"An adventure in finding a memory thief in Starlark-land"}),"\n",(0,i.jsxs)(n.p,{children:["This is a summary and follow-up to ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=IXimf4DCAoY#t=7h21m57s",children:"my talk"})," at BazelCon-2023.\nWith abridged code examples, the full instructions are available ",(0,i.jsx)(n.a,{href:"https://github.com/meroton/memory-adventure",children:"together with the code"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsx)(n.p,{children:"First, we lament Bazel's out-of-memory errors,\nand point out that the often useful Starlark stacktrace does not always show up.\nSome allocation errors just crash Bazel without giving and indication of which allocation failed."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"allocation",src:t(7132).Z+"",width:"1358",height:"952"})}),"\n",(0,i.jsx)(n.p,{children:"This diagram illustrates a common problem for memory errors,\nthe allocation that fails may not be the problem,\nit is just the straw that breaks the camel's back.\nAnd the real thief may already have allocated its memory."}),"\n",(0,i.jsxs)(n.p,{children:["We have seen many errors when working with clients,\nand they typically hide in big corporate code bases.\nWhich complicates troubleshooting, discussion and error reporting.\nSo we create a synthetic repository to try to illustrate the problem,\nand have something to discuss.\nThe code and instructions are available ",(0,i.jsx)(n.a,{href:"https://github.com/meroton/memory-adventure",children:"here"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Errors and poor performance in the analysis phase\nare not good at all.\nThis is because the analysis must always be done\nbefore starting to build all actions.\nWith big projects the number of configuration to build for can be very large,\nso one cannot rely on CI runners to build the same configuration over and over,\nto retain the analysis cache.\nInstead it is on the critical-path for all builds,\nespecially if the actions themselves are cached remotely."}),"\n",(0,i.jsxs)(n.p,{children:['To illustrate (some of the problem) we have a reproduction repository\nwith example code base with some Python and C programs.\nTo introduce memory problems, and make it a little more complex\nwe add two rules: one CPU intensive rule ("spinlock")\nand one memory intensive aspect ("traverse").\nThe "traverse" aspect encodes the full dependency tree of all targets\nand writes that to a file with ',(0,i.jsx)(n.code,{children:"ctx.actions.write"}),".\nSo the allocations are tied to the Action object."]}),"\n",(0,i.jsx)(n.h2,{id:"toolbox",children:"Toolbox"}),"\n",(0,i.jsxs)(n.p,{children:["We have a couple of tools available, many are discussed in the ",(0,i.jsx)(n.a,{href:"https://bazel.build/rules/performance#memory-profiling",children:"memory optimization guide"}),",\nbut we find that some problems can slip through the cracks."]}),"\n",(0,i.jsx)(n.p,{children:"First off, there are the post-build analysis tools in bazel:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"bazel info"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"bazel dump --rules"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"bazel aquery --skyframe_state"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These are a good starting point and have served us well on many occasions.\nBut with this project they seem to miss some allocations\nWe will return to that later.\nAdditionally, these tool will not give any information if the Bazel server crashes.\nYou will need to increase the memory and run the same build again."}),"\n",(0,i.jsx)(n.p,{children:"Then one can use Java tools to inspect what the JVM is doing:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://eclipse.dev/mat/documentation/",children:"Eclipse Memory Analyzer"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"jmap"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The best approach here is to ask Bazel to save the heap if it crashes,\nso it can be analyzed post-mortem: ",(0,i.jsx)(n.code,{children:"bazel --heap_dump_on_oom"})]}),"\n",(0,i.jsx)(n.p,{children:"And lastly, use Bazel's profiling information:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"bazel --profile=profile.gz --generate_json_trace_profile --noslim_profile"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This contains structured information\nand is written continuously to disk,\nso if Bazel crashes we can still parse it,\nwe just need to discard partially truncated events."}),"\n",(0,i.jsx)(n.h2,{id:"expected-memory-consumption",children:"Expected Memory consumption"}),"\n",(0,i.jsx)(n.p,{children:"As the two rules write their string allocations to output files\nwe get a clear picture of the expected RAM usage (or at least a lower bound)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ bazel clean\n$ bazel build \\\n  --aspects @example//memory:eat.bzl%traverse \\\n  --output_groups=default,eat_memory \\\n  //...\n# Memory intensive tree traversal (in KB)\n$ find bazel-out/ -name '*.tree' | xargs du | cut -f1 | paste -sd '+' | bc\n78504\n# CPU intensive spinlocks (in KB)\n$ find bazel-out/ -name '*.spinlock' | xargs du | cut -f1 | paste -sd '+' | bc\n3400\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here is a table with the data:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"Memory for each target"}),(0,i.jsx)(n.th,{children:"Total"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Memory intensive"}),(0,i.jsx)(n.td,{children:"0-17 MB"}),(0,i.jsx)(n.td,{children:"79 MB"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"CPU intensive"}),(0,i.jsx)(n.td,{children:"136 KB"}),(0,i.jsx)(n.td,{children:"3.4 MB"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"reported-memory-consumption",children:"Reported Memory Consumption"}),"\n",(0,i.jsx)(n.p,{children:"Next, we check with the diagnostic tools."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ bazel version\nBazelisk version: development\nBuild label: 6.4.0\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bazel-dump---rules",children:"Bazel dump --rules"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'$ bazel $STARTUP_FLAGS --host_jvm_args=-Xmx"10g" dump --rules\nWarning: this information is intended for consumption by developers\nonly, and may change at any time. Script against it at your own risk!\n\nRULE                              COUNT     ACTIONS          BYTES         EACH\ncc_library                            4          17        524,320      131,080\nnative_binary                         1           4        524,288      524,288\ncc_binary                             6          54        262,176       43,696\ntoolchain_type                       14           0              0            0\ntoolchain                            74           0              0            0\n...\n\nASPECT                             COUNT     ACTIONS          BYTES         EACH\ntraverse                              85          81        262,432        3,087\nspinlock14                            35          66        524,112       14,974\nspinlock15                            35          66              0            0\n...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["First, there are some common rules that we do not care about here,\nthen we have the Aspects.\n",(0,i.jsx)(n.code,{children:"traverse"})," is the memory intensive aspect,\nwhich is applied on the command line\nand ",(0,i.jsx)(n.code,{children:"spinlock<N>"})," are the CPU intensive rules,\nwith identical implementations just numbered (there are 25 of them)."]}),"\n",(0,i.jsx)(n.p,{children:'It is a little surprising that only one have allocations.\nAnd the action count for each aspect does not make sense either,\nas this is not a transitive aspect.\nIt just runs a single action each time the rule is instantiated.\nThe hypothesis is that this is a display problem,\nwith code shared between rules.\nThere are 25 rules, with 25 distinct implementation functions,\nbut they in turn call the same function with the action.\nSo the "count" and "actions" columns are glued together,\nbut the "bytes" is reported for just one of the rules (it would be bad if this was double-counted).'}),"\n",(0,i.jsx)(n.p,{children:"Either way,\nthe total number of bytes does not add up to what we expect.\nCompare the output to the lower-bound determined before:"}),"\n",(0,i.jsx)(n.p,{children:"|  | Memory for each target | Total | Reported Total |\n| ---- | ---- | ----------- |\n| Memory intensive | 0-17 MB | 79 MB | 262 kB\n| CPU intensive | 136 KB |  3.4 MB | 524 kB"}),"\n",(0,i.jsx)(n.h3,{id:"skylark-memory-profile",children:"Skylark Memory Profile"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"This is not part of the video."})}),"\n",(0,i.jsx)(n.p,{children:"The skylark memory profiler is much more advanced,\nand can be dumped after a successful build."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'$ bazel $STARTUP_FLAGS --host_jvm_args=-Xmx"$mem" dump \\\n    --skylark_memory="$dir/memory.pprof"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'$ pprof manual/2023-10-30/10g-2/memory.pprof\nMain binary filename not available.\nType: memory\nTime: Oct 30, 2023 at 12:16pm (CET)\nEntering interactive mode (type "help" for commands, "o" for options)\n(pprof) top\nShowing nodes accounting for 2816.70kB, 73.34% of 3840.68kB total\nShowing top 10 nodes out of 19\n      flat  flat%   sum%        cum   cum%\n     512kB 13.33% 13.33%      512kB 13.33%  impl2\n  256.16kB  6.67% 20.00%   256.16kB  6.67%  traverse_impl\n  256.11kB  6.67% 26.67%   256.11kB  6.67%  _add_linker_artifacts_output_groups\n  256.09kB  6.67% 33.34%   256.09kB  6.67%  alias\n  256.09kB  6.67% 40.00%   256.09kB  6.67%  rule\n  256.08kB  6.67% 46.67%   256.08kB  6.67%  to_list\n  256.06kB  6.67% 53.34%   256.06kB  6.67%  impl7\n  256.04kB  6.67% 60.01%   256.04kB  6.67%  _is_stamping_enabled\n  256.04kB  6.67% 66.67%   256.04kB  6.67%  impl18\n  256.03kB  6.67% 73.34%   768.15kB 20.00%  cc_binary_impl\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here the Memory intensive aspect shows up with 256kB,\nwhich is inline with the output from ",(0,i.jsx)(n.code,{children:"bazel dump --rules"}),",\nbut not reflecting the big allocations we knows it makes."]}),"\n",(0,i.jsx)(n.h3,{id:"eclipse-memory-analyzer",children:"Eclipse Memory Analyzer"}),"\n",(0,i.jsxs)(n.p,{children:["The final tool we have investigated is the Java heap analysis tool\n",(0,i.jsx)(n.a,{href:"https://eclipse.dev/mat/documentation/",children:"Eclipse Memory Analyzer"}),",\nwhich can easily be used with Bazel's ",(0,i.jsx)(n.code,{children:"--heap_dump_on_oom"})," flag.\nOn the other hand it is a little tricker to find a heap dump from a successful build."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"eclipse-analysis",src:t(1215).Z+"",width:"1082",height:"402"})}),"\n",(0,i.jsx)(n.p,{children:"Here we see the (very) big allocation clear as day,\nbut have no information of its provenance."}),"\n",(0,i.jsx)(n.p,{children:"We have not found how to track this back to a Skylark function, Skyframe evaluator\nor anything that could be cross-referenced with the profiling information."}),"\n",(0,i.jsx)(n.h2,{id:"build-time",children:"Build Time"}),"\n",(0,i.jsx)(n.p,{children:"The next section of the talk shows the execution time of the build\nwith varying memory limits."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"combined",src:t(5257).Z+"",width:"640",height:"480"})}),"\n",(0,i.jsx)(n.p,{children:"This is benchmarked with 5 data points for each memory limit,\nand the plot shows failure if there was at least one crash among the data points.\nThere is a region where the build starts to succeed more and more often, but sometimes crashes.\nSo the Crash and not-crash graphs overlap a little,\nyou want to have some leeway to avoid flaky builds from occasional out-of-memory crashes."}),"\n",(0,i.jsx)(n.p,{children:"We see that the Skymeld graph requires a lot less memory than a regular build,\nthat is because our big allocations are all tied to Action objects.\nEnabling Skymeld lets Bazel start executing Actions as soon as they are ready,\nso the resident set of Action objects does not grow so large,\nand the allocations can be freed much sooner."}),"\n",(0,i.jsx)(n.h2,{id:"pessimization-with-limited-memory",children:"Pessimization with limited memory"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"pessimization",src:t(6720).Z+"",width:"1212",height:"827"})}),"\n",(0,i.jsx)(n.p,{children:"We saw a hump in the build time for the Skymeld graph,\nwhere the builds did succeed in the 300 - 400 MB range,\nbut the build speed gradually increased, reaching a plateau at around 500 MB.\nThis is a pattern we have seen before,\nwhere more RAM, or more efficient rules can improve build performance."}),"\n",(0,i.jsxs)(n.p,{children:["This is probably because the memory pressure and the Java Garbage Collector\ninterferes with the Skyframe work.\nSee ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=8Dc8R_Zrf6M&t=3039s",children:"Benjamin Peterson's great talk"})," about the Skyframe for more information."]}),"\n",(0,i.jsx)(n.h2,{id:"future-work",children:"Future work"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"example profile",src:t(7983).Z+"",width:"809",height:"664"})}),"\n",(0,i.jsxs)(n.p,{children:["This section details future work for more tools and signals\nthat we can find from Bazel's profile information\n",(0,i.jsx)(n.code,{children:"--profile=profile.gz --generate_json_trace_profile --noslim_profile"}),".\nWritten in the standard ",(0,i.jsx)(n.code,{children:"chrome://tracing"})," format\nit is easy to parse for both successful and failed builds."]}),"\n",(0,i.jsx)(n.p,{children:"This contains events for the garbage collector,\nand all executed Starlark functions."}),"\n",(0,i.jsx)(n.p,{children:"These can be correlated\nto find which functions are active during, or before, garbage collection events.\nAdditionally, one could collect this information for all failed builds,\nand see if some functions are overrepresented\namong the last active functions for each evaluator in the build."})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},5257:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/build-time-memory-plot-39f61e675034b7e845f9abdbfa8951f4.png"},1215:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/eclipse-memory-analyzer-5f46da77b0ac91a7a92dc4c2d3b445b3.png"},7983:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/example-chrome-tracing-424c445f4f5a56244ed23a270ba7c0c3.png"},6720:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/low-memory-pessimization-667ab96247ad01ee0ec7d5b75b830d84.png"},7132:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/memory-allocation-failure-298bf3c0d8e472754fd513fa6c0ce57d.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>r});var i=t(7294);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);