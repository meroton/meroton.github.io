<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://meroton.github.io/blog</id>
    <title/>
    <updated>2023-11-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://meroton.github.io/blog"/>
    <icon>https://meroton.github.io/img/favicon.svg</icon>
    <entry>
        <title type="html"><![CDATA[Updates to Buildbarn as of November 2023]]></title>
        <id>https://meroton.github.io/blog/buildbarn-updates-2023-11</id>
        <link href="https://meroton.github.io/blog/buildbarn-updates-2023-11"/>
        <updated>2023-11-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a continuation of the]]></summary>
        <content type="html"><![CDATA[<p>This is a continuation of the
<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04/">previous update article</a>
and is a high level summary of what has happened in Buildbarn from 2023-02-16 to 2023-11-14.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="added-support-for-jwts-signed-with-rsa">Added support for JWTs signed with RSA<a href="https://meroton.github.io/blog/buildbarn-updates-2023-11#added-support-for-jwts-signed-with-rsa" class="hash-link" aria-label="Direct link to Added support for JWTs signed with RSA" title="Direct link to Added support for JWTs signed with RSA">​</a></h2>
<p>Support for JWTs signed with RSA has been added.
The following JWT signing algorithms are now supported:</p>
<ul>
<li>HS256</li>
<li>HS384</li>
<li>HS512</li>
<li>RS256</li>
<li>RS384</li>
<li>RS512</li>
<li>EdDSA</li>
<li>ES256</li>
<li>ES384</li>
<li>ES512</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="generalized-tuneables-for-linux-bdi-options">Generalized tuneables for Linux BDI options<a href="https://meroton.github.io/blog/buildbarn-updates-2023-11#generalized-tuneables-for-linux-bdi-options" class="hash-link" aria-label="Direct link to Generalized tuneables for Linux BDI options" title="Direct link to Generalized tuneables for Linux BDI options">​</a></h2>
<p>Linux 6.2 added a sysfs attribute for toggling <code>BDI_CAP_STRICTLIMIT</code> on FUSE mounts.
If using the FUSE backed virtual file system on Linux 6.2
adding <code>{ "strict_limit": "0" }</code> to <code>linux_backing_dev_info_tunables</code>
will remove the <code>BDI_CAP_STRICTLIMIT</code> flag from the FUSE mount.</p>
<p>This may improve fileystem performance
especially when running build actions which
uses mmap<!-- -->:ed<!-- --> files extensively.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="add-support-for-injecting-xcode-environment-variables">Add support for injecting Xcode environment variables<a href="https://meroton.github.io/blog/buildbarn-updates-2023-11#add-support-for-injecting-xcode-environment-variables" class="hash-link" aria-label="Direct link to Add support for injecting Xcode environment variables" title="Direct link to Add support for injecting Xcode environment variables">​</a></h2>
<p>Remote build with macOS may call into locally installed copies of Xcode.
The path to the local copy of Xcode may vary
and Bazel assumes that the remote execution service
is capable of processing Xcode specific environment variables.</p>
<p>See the <a href="https://github.com/buildbarn/bb-remote-execution/blob/master/pkg/proto/configuration/bb_runner/bb_runner.proto#L133" target="_blank" rel="noopener noreferrer">proto files</a> for details.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="add-a-minimum-timestamp-to-actionresultexpiringblobaccess">Add a minimum timestamp to ActionResultExpiringBlobAccess<a href="https://meroton.github.io/blog/buildbarn-updates-2023-11#add-a-minimum-timestamp-to-actionresultexpiringblobaccess" class="hash-link" aria-label="Direct link to Add a minimum timestamp to ActionResultExpiringBlobAccess" title="Direct link to Add a minimum timestamp to ActionResultExpiringBlobAccess">​</a></h2>
<p>A misbehaving worker may polluted the action cache,
after fixing the misbehaving worker
we would rather not throw away the entire action cache.</p>
<p>A minimum timestamp in ActionResultExpiringBlobAccess
allows us to mark a timestamp in the past
before which the action should be considered invalid.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="add-authentication-to-http-servers">Add authentication to HTTP servers<a href="https://meroton.github.io/blog/buildbarn-updates-2023-11#add-authentication-to-http-servers" class="hash-link" aria-label="Direct link to Add authentication to HTTP servers" title="Direct link to Add authentication to HTTP servers">​</a></h2>
<p>Much like the gRPC servers are capable of authenticated configuration
the http servers can now also require authentication.</p>
<p>This allows the bb_browser and bb_scheduler UI
to authenticate access using OAuth2 without involving any other middleware.</p>
<p>This also allows us to add authorization configuration for administrative tasks
such as draining workers or killing of jobs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="authentication-using-a-json-web-key-set">Authentication using a JSON Web Key Set<a href="https://meroton.github.io/blog/buildbarn-updates-2023-11#authentication-using-a-json-web-key-set" class="hash-link" aria-label="Direct link to Authentication using a JSON Web Key Set" title="Direct link to Authentication using a JSON Web Key Set">​</a></h2>
<p>JSON Web Key Sets (JWKS) is a standard format
which allows us to specificy multiple different encryption keys
that may have been used to sign our JWT authentication.</p>
<p>Buildbarn can load the JWKS specification,
either inline or as a file,
when specifying trusted encryption keys.</p>
<p>This allows us to have rotation with overlap of encryption keys.</p>]]></content>
        <author>
            <name>Benjamin Ingberg</name>
        </author>
        <category label="release" term="release"/>
        <category label="buildbarn" term="buildbarn"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Memory Adventure]]></title>
        <id>https://meroton.github.io/blog/memory-adventure</id>
        <link href="https://meroton.github.io/blog/memory-adventure"/>
        <updated>2023-11-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An adventure in finding a memory thief in Starlark-land]]></summary>
        <content type="html"><![CDATA[<p>An adventure in finding a memory thief in Starlark-land</p>
<p>This is a summary and follow-up to <a href="https://www.youtube.com/watch?v=IXimf4DCAoY#t=7h21m57s" target="_blank" rel="noopener noreferrer">my talk</a> at BazelCon-2023.
With abridged code examples, the full instructions are available <a href="https://github.com/meroton/memory-adventure" target="_blank" rel="noopener noreferrer">together with the code</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="problem-statement">Problem Statement<a href="https://meroton.github.io/blog/memory-adventure#problem-statement" class="hash-link" aria-label="Direct link to Problem Statement" title="Direct link to Problem Statement">​</a></h2>
<p>First, we lament Bazel's out-of-memory errors,
and point out that the often useful Starlark stacktrace does not always show up.
Some allocation errors just crash Bazel without giving and indication of which allocation failed.</p>
<p><img loading="lazy" alt="allocation" src="https://meroton.github.io/assets/images/memory-allocation-failure-298bf3c0d8e472754fd513fa6c0ce57d.png" width="1358" height="952" class="img_ev3q"></p>
<p>This diagram illustrates a common problem for memory errors,
the allocation that fails may not be the problem,
it is just the straw that breaks the camel's back.
And the real thief may already have allocated its memory.</p>
<p>We have seen many errors when working with clients,
and they typically hide in big corporate code bases.
Which complicates troubleshooting, discussion and error reporting.
So we create a synthetic repository to try to illustrate the problem,
and have something to discuss.
The code and instructions are available <a href="https://github.com/meroton/memory-adventure" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>Errors and poor performance in the analysis phase
are not good at all.
This is because the analysis must always be done
before starting to build all actions.
With big projects the number of configuration to build for can be very large,
so one cannot rely on CI runners to build the same configuration over and over,
to retain the analysis cache.
Instead it is on the critical-path for all builds,
especially if the actions themselves are cached remotely.</p>
<p>To illustrate (some of the problem) we have a reproduction repository
with example code base with some Python and C programs.
To introduce memory problems, and make it a little more complex
we add two rules: one CPU intensive rule ("spinlock")
and one memory intensive aspect ("traverse").
The "traverse" aspect encodes the full dependency tree of all targets
and writes that to a file with <code>ctx.actions.write</code>.
So the allocations are tied to the Action object.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="toolbox">Toolbox<a href="https://meroton.github.io/blog/memory-adventure#toolbox" class="hash-link" aria-label="Direct link to Toolbox" title="Direct link to Toolbox">​</a></h2>
<p>We have a couple of tools available, many are discussed in the <a href="https://bazel.build/rules/performance#memory-profiling" target="_blank" rel="noopener noreferrer">memory optimization guide</a>,
but we find that some problems can slip through the cracks.</p>
<p>First off, there are the post-build analysis tools in bazel:</p>
<ul>
<li><code>bazel info</code></li>
<li><code>bazel dump --rules</code></li>
<li><code>bazel aquery --skyframe_state</code></li>
</ul>
<p>These are a good starting point and have served us well on many occasions.
But with this project they seem to miss some allocations
We will return to that later.
Additionally, these tool will not give any information if the Bazel server crashes.
You will need to increase the memory and run the same build again.</p>
<p>Then one can use Java tools to inspect what the JVM is doing:</p>
<ul>
<li><a href="https://eclipse.dev/mat/documentation/" target="_blank" rel="noopener noreferrer">Eclipse Memory Analyzer</a></li>
<li><code>jmap</code></li>
</ul>
<p>The best approach here is to ask Bazel to save the heap if it crashes,
so it can be analyzed post-mortem: <code>bazel --heap_dump_on_oom</code></p>
<p>And lastly, use Bazel's profiling information:</p>
<ul>
<li><code>bazel --profile=profile.gz --generate_json_trace_profile --noslim_profile</code></li>
</ul>
<p>This contains structured information
and is written continuously to disk,
so if Bazel crashes we can still parse it,
we just need to discard partially truncated events.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="expected-memory-consumption">Expected Memory consumption<a href="https://meroton.github.io/blog/memory-adventure#expected-memory-consumption" class="hash-link" aria-label="Direct link to Expected Memory consumption" title="Direct link to Expected Memory consumption">​</a></h2>
<p>As the two rules write their string allocations to output files
we get a clear picture of the expected RAM usage (or at least a lower bound).</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ bazel clean</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ bazel build \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --aspects @example//memory:eat.bzl%traverse \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --output_groups=default,eat_memory \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  //...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Memory intensive tree traversal (in KB)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ find bazel-out/ -name '*.tree' | xargs du | cut -f1 | paste -sd '+' | bc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">78504</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># CPU intensive spinlocks (in KB)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ find bazel-out/ -name '*.spinlock' | xargs du | cut -f1 | paste -sd '+' | bc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3400</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here is a table with the data:</p>
<table><thead><tr><th></th><th>Memory for each target</th><th>Total</th></tr></thead><tbody><tr><td>Memory intensive</td><td>0-17 MB</td><td>79 MB</td></tr><tr><td>CPU intensive</td><td>136 KB</td><td>3.4 MB</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reported-memory-consumption">Reported Memory Consumption<a href="https://meroton.github.io/blog/memory-adventure#reported-memory-consumption" class="hash-link" aria-label="Direct link to Reported Memory Consumption" title="Direct link to Reported Memory Consumption">​</a></h2>
<p>Next, we check with the diagnostic tools.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ bazel version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Bazelisk version: development</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Build label: 6.4.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bazel-dump---rules">Bazel dump --rules<a href="https://meroton.github.io/blog/memory-adventure#bazel-dump---rules" class="hash-link" aria-label="Direct link to Bazel dump --rules" title="Direct link to Bazel dump --rules">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ bazel $STARTUP_FLAGS --host_jvm_args=-Xmx"10g" dump --rules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Warning: this information is intended for consumption by developers</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">only, and may change at any time. Script against it at your own risk!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RULE                              COUNT     ACTIONS          BYTES         EACH</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cc_library                            4          17        524,320      131,080</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">native_binary                         1           4        524,288      524,288</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cc_binary                             6          54        262,176       43,696</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">toolchain_type                       14           0              0            0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">toolchain                            74           0              0            0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ASPECT                             COUNT     ACTIONS          BYTES         EACH</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">traverse                              85          81        262,432        3,087</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spinlock14                            35          66        524,112       14,974</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spinlock15                            35          66              0            0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>First, there are some common rules that we do not care about here,
then we have the Aspects.
<code>traverse</code> is the memory intensive aspect,
which is applied on the command line
and <code>spinlock&lt;N&gt;</code> are the CPU intensive rules,
with identical implementations just numbered (there are 25 of them).</p>
<p>It is a little surprising that only one have allocations.
And the action count for each aspect does not make sense either,
as this is not a transitive aspect.
It just runs a single action each time the rule is instantiated.
The hypothesis is that this is a display problem,
with code shared between rules.
There are 25 rules, with 25 distinct implementation functions,
but they in turn call the same function with the action.
So the "count" and "actions" columns are glued together,
but the "bytes" is reported for just one of the rules (it would be bad if this was double-counted).</p>
<p>Either way,
the total number of bytes does not add up to what we expect.
Compare the output to the lower-bound determined before:</p>
<p>|  | Memory for each target | Total | Reported Total |
| ---- | ---- | ----------- |
| Memory intensive | 0-17 MB | 79 MB | 262 kB
| CPU intensive | 136 KB |  3.4 MB | 524 kB</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="skylark-memory-profile">Skylark Memory Profile<a href="https://meroton.github.io/blog/memory-adventure#skylark-memory-profile" class="hash-link" aria-label="Direct link to Skylark Memory Profile" title="Direct link to Skylark Memory Profile">​</a></h3>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>This is not part of the video.</p></div></div>
<p>The skylark memory profiler is much more advanced,
and can be dumped after a successful build.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ bazel $STARTUP_FLAGS --host_jvm_args=-Xmx"$mem" dump \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    --skylark_memory="$dir/memory.pprof"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ pprof manual/2023-10-30/10g-2/memory.pprof</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Main binary filename not available.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type: memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Time: Oct 30, 2023 at 12:16pm (CET)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Entering interactive mode (type "help" for commands, "o" for options)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(pprof) top</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Showing nodes accounting for 2816.70kB, 73.34% of 3840.68kB total</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Showing top 10 nodes out of 19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      flat  flat%   sum%        cum   cum%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     512kB 13.33% 13.33%      512kB 13.33%  impl2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  256.16kB  6.67% 20.00%   256.16kB  6.67%  traverse_impl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  256.11kB  6.67% 26.67%   256.11kB  6.67%  _add_linker_artifacts_output_groups</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  256.09kB  6.67% 33.34%   256.09kB  6.67%  alias</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  256.09kB  6.67% 40.00%   256.09kB  6.67%  rule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  256.08kB  6.67% 46.67%   256.08kB  6.67%  to_list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  256.06kB  6.67% 53.34%   256.06kB  6.67%  impl7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  256.04kB  6.67% 60.01%   256.04kB  6.67%  _is_stamping_enabled</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  256.04kB  6.67% 66.67%   256.04kB  6.67%  impl18</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  256.03kB  6.67% 73.34%   768.15kB 20.00%  cc_binary_impl</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here the Memory intensive aspect shows up with 256kB,
which is inline with the output from <code>bazel dump --rules</code>,
but not reflecting the big allocations we knows it makes.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="eclipse-memory-analyzer">Eclipse Memory Analyzer<a href="https://meroton.github.io/blog/memory-adventure#eclipse-memory-analyzer" class="hash-link" aria-label="Direct link to Eclipse Memory Analyzer" title="Direct link to Eclipse Memory Analyzer">​</a></h3>
<p>The final tool we have investigated is the Java heap analysis tool
<a href="https://eclipse.dev/mat/documentation/" target="_blank" rel="noopener noreferrer">Eclipse Memory Analyzer</a>,
which can easily be used with Bazel's <code>--heap_dump_on_oom</code> flag.
On the other hand it is a little tricker to find a heap dump from a successful build.</p>
<p><img loading="lazy" alt="eclipse-analysis" src="https://meroton.github.io/assets/images/eclipse-memory-analyzer-5f46da77b0ac91a7a92dc4c2d3b445b3.png" width="1082" height="402" class="img_ev3q"></p>
<p>Here we see the (very) big allocation clear as day,
but have no information of its provenance.</p>
<p>We have not found how to track this back to a Skylark function, Skyframe evaluator
or anything that could be cross-referenced with the profiling information.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="build-time">Build Time<a href="https://meroton.github.io/blog/memory-adventure#build-time" class="hash-link" aria-label="Direct link to Build Time" title="Direct link to Build Time">​</a></h2>
<p>The next section of the talk shows the execution time of the build
with varying memory limits.</p>
<p><img loading="lazy" alt="combined" src="https://meroton.github.io/assets/images/build-time-memory-plot-39f61e675034b7e845f9abdbfa8951f4.png" width="640" height="480" class="img_ev3q"></p>
<p>This is benchmarked with 5 data points for each memory limit,
and the plot shows failure if there was at least one crash among the data points.
There is a region where the build starts to succeed more and more often, but sometimes crashes.
So the Crash and not-crash graphs overlap a little,
you want to have some leeway to avoid flaky builds from occasional out-of-memory crashes.</p>
<p>We see that the Skymeld graph requires a lot less memory than a regular build,
that is because our big allocations are all tied to Action objects.
Enabling Skymeld lets Bazel start executing Actions as soon as they are ready,
so the resident set of Action objects does not grow so large,
and the allocations can be freed much sooner.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pessimization-with-limited-memory">Pessimization with limited memory<a href="https://meroton.github.io/blog/memory-adventure#pessimization-with-limited-memory" class="hash-link" aria-label="Direct link to Pessimization with limited memory" title="Direct link to Pessimization with limited memory">​</a></h2>
<p><img loading="lazy" alt="pessimization" src="https://meroton.github.io/assets/images/low-memory-pessimization-667ab96247ad01ee0ec7d5b75b830d84.png" width="1212" height="827" class="img_ev3q"></p>
<p>We saw a hump in the build time for the Skymeld graph,
where the builds did succeed in the 300 - 400 MB range,
but the build speed gradually increased, reaching a plateau at around 500 MB.
This is a pattern we have seen before,
where more RAM, or more efficient rules can improve build performance.</p>
<p>This is probably because the memory pressure and the Java Garbage Collector
interferes with the Skyframe work.
See <a href="https://www.youtube.com/watch?v=8Dc8R_Zrf6M&amp;t=3039s" target="_blank" rel="noopener noreferrer">Benjamin Peterson's great talk</a> about the Skyframe for more information.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-work">Future work<a href="https://meroton.github.io/blog/memory-adventure#future-work" class="hash-link" aria-label="Direct link to Future work" title="Direct link to Future work">​</a></h2>
<p><img loading="lazy" alt="example profile" src="https://meroton.github.io/assets/images/example-chrome-tracing-424c445f4f5a56244ed23a270ba7c0c3.png" width="809" height="664" class="img_ev3q"></p>
<p>This section details future work for more tools and signals
that we can find from Bazel's profile information
<code>--profile=profile.gz --generate_json_trace_profile --noslim_profile</code>.
Written in the standard <code>chrome://tracing</code> format
it is easy to parse for both successful and failed builds.</p>
<p>This contains events for the garbage collector,
and all executed Starlark functions.</p>
<p>These can be correlated
to find which functions are active during, or before, garbage collection events.
Additionally, one could collect this information for all failed builds,
and see if some functions are overrepresented
among the last active functions for each evaluator in the build.</p>]]></content>
        <author>
            <name>Nils Wireklint</name>
        </author>
        <category label="bazel" term="bazel"/>
        <category label="buildbarn" term="buildbarn"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[BazelCon 2023]]></title>
        <id>https://meroton.github.io/blog/bazelcon-2023</id>
        <link href="https://meroton.github.io/blog/bazelcon-2023"/>
        <updated>2023-11-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Meroton visited BazelCon 2023 in Munich October 24-25, 2023.]]></summary>
        <content type="html"><![CDATA[<p>Meroton visited BazelCon 2023 in Munich October 24-25, 2023.
During the conference, we held three talks:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=8Dc8R_Zrf6M#t=7h36m20s" target="_blank" rel="noopener noreferrer">Remote Output Service - How not to have your bytes and eat them too</a>
by Benjamin Ingberg about bb_clientd and the Remote Output Service.</li>
<li><a href="https://www.youtube.com/watch?v=IXimf4DCAoY#t=3h2m10s" target="_blank" rel="noopener noreferrer">Buildbarn - From 100 to 100.000 CPUs</a>
(<a href="https://docs.google.com/presentation/d/14qgMa1J9hBMTU017PlpQokKtS5n0KxJbJXPjndxqPqE/edit?usp=sharing&amp;resourcekey=0-OF3Hrwvr5G7aDnJG_ABRhw" target="_blank" rel="noopener noreferrer">slides</a>)
by Fredrik Medley.</li>
<li><a href="https://www.youtube.com/watch?v=IXimf4DCAoY#t=7h21m57s" target="_blank" rel="noopener noreferrer">Dude, where is my RAM? - An adventure in finding a RAM thief in Starlak land</a>
by Nils Wireklint about difficulties in debugging out-of-memory errors in Bazel.</li>
</ul>
<p>Other talks that mentioned Buildbarn were:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=8Dc8R_Zrf6M#t=5h41m5s" target="_blank" rel="noopener noreferrer">Migrating a Multiple-Platform Game Engine to Bazel</a>
where Kai Zhang from NetEase talks about a
<a href="https://github.com/kkpattern/bb-remote-execution-py" target="_blank" rel="noopener noreferrer">Buildbarn worker implementation in Python for Windows and MacOS</a>.</li>
<li><a href="https://www.youtube.com/watch?v=8Dc8R_Zrf6M#t=7h56m2s" target="_blank" rel="noopener noreferrer">Planting Bazel in barren soil: A Perl Story</a>
where Manuel Naranjo from Booking.com is using Buildbarn for remote execution and Buildbuddy for Build Event Streaming.</li>
</ul>
<p>We are thankful for all amazing chats with the community and are looking forward to BazelCon 2024.</p>]]></content>
        <author>
            <name>Fredrik Medley</name>
        </author>
        <category label="bazel" term="bazel"/>
        <category label="buildbarn" term="buildbarn"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Buildbarn Block Sizes]]></title>
        <id>https://meroton.github.io/blog/buildbarn-block-sizes</id>
        <link href="https://meroton.github.io/blog/buildbarn-block-sizes"/>
        <updated>2023-04-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[When starting out with remote caching,]]></summary>
        <content type="html"><![CDATA[<p>When starting out with remote caching,
an error you are likely to run into is:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">java.io.IOException: com.google.devtools.build.lib.remote.ExecutionStatusException:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INVALID_ARGUMENT: Failed to store previous blob 1-&lt;HASH&gt;-&lt;LARGE_NUM&gt;:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Shard 1: Blob is &lt;LARGE_NUM&gt; bytes in size,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">while this backend is only capable of storing blobs of up to 238608384 bytes in size</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is because your storage backend is too small.
You are attempting to upload a blob larger than the largest blob accepted by your storage backend.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-i-fix-it">How do I fix it?<a href="https://meroton.github.io/blog/buildbarn-block-sizes#how-do-i-fix-it" class="hash-link" aria-label="Direct link to How do I fix it?" title="Direct link to How do I fix it?">​</a></h2>
<p>The largest blob you can store is the size of your your storage device
divided by the number of blocks in your device.</p>
<p>To store larger blobs,
either increase the size of your storage device
or decrease the number of blocks it is split into.
Larger storage devices will take more disk,
while fewer blocks will decrease the granularity which your cache works with.</p>
<p>In
<a href="https://github.com/buildbarn/bb-deployments" target="_blank" rel="noopener noreferrer">bb-deployments</a>
this setting is found in
<a href="https://github.com/buildbarn/bb-deployments/blob/d63c032b2b4d96f93cb889f95add15c26118d771/docker-compose/config/storage.jsonnet" target="_blank" rel="noopener noreferrer">storage.jsonnet</a>.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">contentAddressableStorage</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">backend</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string-property property" style="color:#36acaa">'local'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">oldBlocks</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">currentBlocks</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">24</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">newBlocks</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">blocksOnBlockDevice</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token literal-property property" style="color:#36acaa">source</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">file</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token literal-property property" style="color:#36acaa">path</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/storage-cas/blocks'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token literal-property property" style="color:#36acaa">sizeBytes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 8GiB</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token literal-property property" style="color:#36acaa">spareBlocks</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To facilitate getting started bb-deployments emulates a block device by using an 8GiB large file.
This file is small enough to fit most builds while not taking over the disk completely from a developers machine.</p>
<p>The device is then split into 36 blocks (8+24+1+3),
where each block can then store a maximum of 238608384 bytes (8GiB / 36 - some alignment).</p>
<p>In production it is preferable to use a large raw block device for this purpose.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-does-newoldcurrentspare-mean">What does new/old/current/spare mean?<a href="https://meroton.github.io/blog/buildbarn-block-sizes#what-does-newoldcurrentspare-mean" class="hash-link" aria-label="Direct link to What does new/old/current/spare mean?" title="Direct link to What does new/old/current/spare mean?">​</a></h2>
<p>In depth documentation about all the settings are available in the
<a href="https://github.com/buildbarn/bb-storage/blob/master/pkg/proto/configuration/blobstore/blobstore.proto" target="_blank" rel="noopener noreferrer">configuration proto files</a>.</p>
<p>In essence the storage works as a ringbuffer where the assignment of each block is rotated.
Consider a 5 block configuration with 1 old, 2 current, 1 new and 1 spare block.</p>
<p><img loading="lazy" alt="diagram" src="https://meroton.github.io/assets/images/2023-04-11-buildbarn-block-size-1-15e36bcc18a3d4fcef69de02f8941f0e.svg" width="1190" height="559" class="img_ev3q"></p>
<p>As data is referenced from an old block
it gets written into a new block.
When the new block is full the role rotates.</p>
<p><img loading="lazy" alt="diagram" src="https://meroton.github.io/assets/images/2023-04-11-buildbarn-block-size-2-6e29080d339215d72c87cdd8a8a0000b.svg" width="1190" height="559" class="img_ev3q"></p>
<p>There are some tradeoffs in behaviour to consider when choosing your block layout. Fewer blocks will allow larger individual blobs at the cost of granularity. Here is a quick summary of the meaning of the different fields.</p>
<ul>
<li><strong>Old</strong> - Region where reads are actively copied over to new, too small value and your device behaves more like a FIFO than a LRU cache, too large and your device does a lot of uneccesary copying.</li>
<li><strong>Current</strong> - Stable region, should be the majority of your device.</li>
<li><strong>New</strong> - Region for writing new data to, must be 1 for AC and should be 1-4 for CAS. Having a couple of new blocks allows data to be better spread out over the device so as to not expire at the same time.</li>
<li><strong>Spare</strong> - Region for giving ongoing reads some time to finish before data starts getting overwritten.</li>
</ul>]]></content>
        <author>
            <name>Benjamin Ingberg</name>
        </author>
        <category label="buildbarn" term="buildbarn"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Updates to Buildbarn deployment repo as of Febuary 2023]]></title>
        <id>https://meroton.github.io/blog/bb-deployments-updates-2023-02</id>
        <link href="https://meroton.github.io/blog/bb-deployments-updates-2023-02"/>
        <updated>2023-02-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The example configuration project for buildbarn]]></summary>
        <content type="html"><![CDATA[<p>The example configuration project for buildbarn
<a href="https://github.com/buildbarn/bb-deployments" target="_blank" rel="noopener noreferrer">bb-deployments</a>
has gotten updates.</p>
<p>This is a continuation of the
<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04/">updates from last year article</a>
and is a high level summary of what has happened since April 2022 up to 2023-02-16.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="let-referenceexpandingblobaccess-support-gcs">Let ReferenceExpandingBlobAccess support GCS<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#let-referenceexpandingblobaccess-support-gcs" class="hash-link" aria-label="Direct link to Let ReferenceExpandingBlobAccess support GCS" title="Direct link to Let ReferenceExpandingBlobAccess support GCS">​</a></h2>
<p>ReferenceExpandingBlobAccess already supports S3 so support was extended to Google Cloud Storage buckets.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="support-for-prefetching-virtual-filesystems">Support for prefetching Virtual Filesystems<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#support-for-prefetching-virtual-filesystems" class="hash-link" aria-label="Direct link to Support for prefetching Virtual Filesystems" title="Direct link to Support for prefetching Virtual Filesystems">​</a></h2>
<p>Running workers with Fuse allows inputs for an action
to be downloaded on demand.
This significantly reduces the amount of data
that gets sent in order to run overspecified actions.
This however leads to poor performance for actions
which reads a lot of their inputs synchronously.</p>
<p>With the prefetcher most of these actions can be recognized
and data which is likely to be needed
can be downloaded ahead of time.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="support-for-sha256tree">Support for sha256tree<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#support-for-sha256tree" class="hash-link" aria-label="Direct link to Support for sha256tree" title="Direct link to Support for sha256tree">​</a></h2>
<p>Buildbarn has added support for
<a href="https://github.com/bazelbuild/remote-apis/pull/235" target="_blank" rel="noopener noreferrer">sha256tree</a>
which uses sha256 hashing over a tree structure similar to blake3.</p>
<p>This algorithm will allow large CAS objects to be chunked and decompositioned
with guaranteed data integrity while still using sha256 hardware instructions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="completeness-checking-now-streams-rev2-tree-objects">Completeness checking now streams REv2 Tree objects<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#completeness-checking-now-streams-rev2-tree-objects" class="hash-link" aria-label="Direct link to Completeness checking now streams REv2 Tree objects" title="Direct link to Completeness checking now streams REv2 Tree objects">​</a></h2>
<p>This change introduces a small change to the configuration schema. If you previous had this:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">backend: { completenessChecking: ... },</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You will now need to write something along these lines:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">backend: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    completenessChecking: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        backend: ...,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        maximumTotalTreeSizeBytes: 64 * 1024 * 1024,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">},</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>See also the
<a href="https://github.com/buildbarn/bb-storage/commit/1b84fa824dc60e77776ce50e05c549fdf20c089b" target="_blank" rel="noopener noreferrer">bb-storage commit 1b84fa8</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="postponed-healthy-service-status">Postponed healthy service status<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#postponed-healthy-service-status" class="hash-link" aria-label="Direct link to Postponed healthy service status" title="Direct link to Postponed healthy service status">​</a></h2>
<p>The healthy and serving status,
i.e. HTTP <code>/-/healthy</code> and
<a href="https://pkg.go.dev/google.golang.org/grpc/health/grpc_health_v1#HealthCheckResponse_ServingStatus" target="_blank" rel="noopener noreferrer">grpc_health_v1.HealthCheckResponse_SERVING</a>,
are now postponed until the whole service is up and running.
Before, the healthy status was potentially reported before starting to listen to the gRPC ports.
Kubernetes will now wait until the service is up before forwarding connections to it.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="server-keepalive-parameter-options">Server keepalive parameter options<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#server-keepalive-parameter-options" class="hash-link" aria-label="Direct link to Server keepalive parameter options" title="Direct link to Server keepalive parameter options">​</a></h2>
<p>The option <code>buildbarn.configuration.grpc.ServerConfiguration.keepalive_parameters</code> can be used for L4 load balancing,
to control when to ask clients to reconnect.
For default values, see
<a href="https://pkg.go.dev/google.golang.org/grpc@v1.49.0/keepalive#ServerParameters" target="_blank" rel="noopener noreferrer">keepalive.ServerParameters</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="graceful-termination-of-localblobaccess">Graceful termination of <code>LocalBlobAccess</code><a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#graceful-termination-of-localblobaccess" class="hash-link" aria-label="Direct link to graceful-termination-of-localblobaccess" title="Direct link to graceful-termination-of-localblobaccess">​</a></h2>
<p>When <code>SIGTERM</code> or <code>SIGINT</code> is received, the <code>LocalBlobAccess</code> now synchronize data to disk before shutting down.
Deployments using persistent storage will no longer observe loss of data when restarting the <code>bb_storage</code> services.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="non-sector-aligned-writes-to-block-device">Non-sector Aligned Writes to Block Device<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#non-sector-aligned-writes-to-block-device" class="hash-link" aria-label="Direct link to Non-sector Aligned Writes to Block Device" title="Direct link to Non-sector Aligned Writes to Block Device">​</a></h2>
<p>Using sector aligned storage is wasteful for the action cache where the messages are typically very small.
Buildbarn can now fill all the gaps when writing, making storage more efficient.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dag-shaped-blobaccess-configuration">DAG Shaped BlobAccess Configuration<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#dag-shaped-blobaccess-configuration" class="hash-link" aria-label="Direct link to DAG Shaped BlobAccess Configuration" title="Direct link to DAG Shaped BlobAccess Configuration">​</a></h2>
<p>Instead of a tree shaped BlobAccess configuration, the <code>with_labels</code> notation allows a directed acyclic graph.
See also the
<a href="https://github.com/buildbarn/bb-storage/commit/cc295adc0f05cd579d48a65325ce54b54331c6a6" target="_blank" rel="noopener noreferrer">bb-storage commit cc295ad</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="nfsv4-as-worker-filesystem">NFSv4 as worker filesystem<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#nfsv4-as-worker-filesystem" class="hash-link" aria-label="Direct link to NFSv4 as worker filesystem" title="Direct link to NFSv4 as worker filesystem">​</a></h2>
<p>The <code>bb_worker</code> can now supply the working directory for <code>bb_runner</code> using NFSv4.
Previously, FUSE and hard linking files from the worker cache were the only two options.
This addition was mainly done to overcome the poor FUSE support on macOS.</p>
<p>The NFSv4 server in <code>bb_worker</code> only supports macOS at the moment.
No effort has been spent to write custom mount logic for other systems yet.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="specify-forwardmetadata-with-a-jmespath">Specify <code>forwardMetadata</code> with a JMESPath<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#specify-forwardmetadata-with-a-jmespath" class="hash-link" aria-label="Direct link to specify-forwardmetadata-with-a-jmespath" title="Direct link to specify-forwardmetadata-with-a-jmespath">​</a></h2>
<p>Metadata forwarding is now more flexible, the JMESPath expressions can for example add authorization result data.
The format is described in
<a href="https://github.com/buildbarn/bb-storage/blob/0c2fcad5872b0fef47bb5bee8aba9518dc2fe465/pkg/proto/configuration/grpc/grpc.proto#L55-L93" target="_blank" rel="noopener noreferrer">grpc.proto</a>.</p>
<p>A common use case is to replace</p>
<div class="language-jsonnet codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsonnet codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    forwardMetadata: ["build.bazel.remote.execution.v2.requestmetadata-bin"],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>with</p>
<div class="language-jsonnet codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsonnet codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    addMetadataJmespathExpression: '{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "build.bazel.remote.execution.v2.requestmetadata-bin":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            incomingGRPCMetadata."build.bazel.remote.execution.v2.requestmetadata-bin"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tracing-deprecate-the-jaeger-collector-span-exporter">Tracing: Deprecate the Jaeger collector span exporter<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#tracing-deprecate-the-jaeger-collector-span-exporter" class="hash-link" aria-label="Direct link to Tracing: Deprecate the Jaeger collector span exporter" title="Direct link to Tracing: Deprecate the Jaeger collector span exporter">​</a></h2>
<p>This option is deprecated, as Jaeger 1.35 and later provide native support for the OpenTelemetry protocol.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bb-deployments-ubuntu-2204-example-runner-image"><code>bb-deployments</code> Ubuntu 22.04 Example Runner Image<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#bb-deployments-ubuntu-2204-example-runner-image" class="hash-link" aria-label="Direct link to bb-deployments-ubuntu-2204-example-runner-image" title="Direct link to bb-deployments-ubuntu-2204-example-runner-image">​</a></h2>
<p>The <a href="https://github.com/bazelbuild/bazel-toolchains/blob/4.0.0/rules/rbe_repo.bzl#L896" target="_blank" rel="noopener noreferrer">rbe_autoconfig</a>
in <a href="https://github.com/bazelbuild/bazel-toolchains" target="_blank" rel="noopener noreferrer">bazel-toolchains</a>
has been deprecated. In bb-deployments it has been replaced by the
<a href="https://github.com/nektos/act/blob/master/IMAGES.md" target="_blank" rel="noopener noreferrer">Act</a> image
<a href="https://github.com/catthehacker/docker_images" target="_blank" rel="noopener noreferrer">ghcr.io/catthehacker/ubuntu<!-- -->:act-22<!-- -->.04</a>,
distributed by <a href="https://github.com/catthehacker/docker_images" target="_blank" rel="noopener noreferrer">catthehacker</a>,
used for running GitHub Actions locally under Ubuntu 22.04.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bb-deployments-integration-tests"><code>bb-deployments</code> Integration Tests<a href="https://meroton.github.io/blog/bb-deployments-updates-2023-02#bb-deployments-integration-tests" class="hash-link" aria-label="Direct link to bb-deployments-integration-tests" title="Direct link to bb-deployments-integration-tests">​</a></h2>
<p>The <a href="https://github.com/buildbarn/bb-deployments/tree/ce123473f27290648d1e56f7072468eb6b67fefb/bare" target="_blank" rel="noopener noreferrer">bare deployment</a> and
<a href="https://github.com/buildbarn/bb-deployments/tree/ce123473f27290648d1e56f7072468eb6b67fefb/docker-compose" target="_blank" rel="noopener noreferrer">Docker Compose deployment</a>
have now got <a href="https://github.com/buildbarn/bb-deployments/tree/ce123473f27290648d1e56f7072468eb6b67fefb/tools" target="_blank" rel="noopener noreferrer">tests scripts</a>
that builds and tests <code>@abseil-hello//:hello_test</code> remotely, shuts down and then checks for 100% cache hit after restart.
Another CI test is checking for minimal differences between the Docker Compose deployment and
the <a href="https://github.com/buildbarn/bb-deployments/tree/ce123473f27290648d1e56f7072468eb6b67fefb/kubernetes" target="_blank" rel="noopener noreferrer">Kubernetes deployment</a>.</p>
<p>If there are any other changes you feel deserve a mention
feel free to submit a pull request at github using the link below.</p>]]></content>
        <author>
            <name>Benjamin Ingberg</name>
        </author>
        <category label="release" term="release"/>
        <category label="buildbarn" term="buildbarn"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bazel 6 Errors when using Build without the Bytes]]></title>
        <id>https://meroton.github.io/blog/bazel-6-errors-build-without-the-bytes</id>
        <link href="https://meroton.github.io/blog/bazel-6-errors-build-without-the-bytes"/>
        <updated>2023-02-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[_ UPDATE:  Bazel has a workaround for this issue]]></summary>
        <content type="html"><![CDATA[<p><em>** UPDATE: ** Bazel has a workaround for this issue
preventing the permanent build failure loop from 6.1.0 and
a proper fix with the introduction of
<a href="https://bazel.build/reference/command-line-reference#flag--experimental_remote_cache_ttl" target="_blank" rel="noopener noreferrer"><code>--experimental_remote_cache_ttl</code></a>
in Bazel 7</em></p>
<hr>
<p>Starting from v6.0.0, Bazel crashes when building without the bytes.
Because it sets <code>--experimental_action_cache_store_output_metadata</code>
when using <code>--remote_download_minimal</code> or <code>--remote_download_toplevel</code>.</p>
<p>Effectively this leads to Bazel getting stuck in a build failure loop
when your remote cache evicts an item you need from the cache.</p>
<div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">developer@machine:~$ bazel test @abseil-hello//:hello_test --remote_download_</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">minimal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[0 / 6] [Prepa] BazelWorkspaceStatusAction stable-status.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ERROR: /home/developer/.cache/bazel/_bazel_developer/139b99b96c4ab6cba5122193</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1a36e346/external/abseil-hello/BUILD.bazel:26:8: Linking external/abseil-hell</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">o/hello_test failed: (Exit 34): 42 errors during bulk transfer:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">java.io.FileNotFoundException: /home/developer/.cache/bazel/_bazel_developer/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">139b99b96c4ab6cba51221931a36e346/execroot/cache_test/bazel-out/k8-fastbuild/b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">in/external/com_google_absl/absl/base/_objs/base/spinlock.pic.o (No such file</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> or directory)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Target @abseil-hello//:hello_test failed to build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Use --verbose_failures to see the command lines of failed build steps.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INFO: Elapsed time: 3.820s, Critical Path: 0.88s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INFO: 5 processes: 4 internal, 1 remote.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FAILED: Build did NOT complete successfully</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@abseil-hello//:hello_test                                   FAILED TO BUILD</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The key here is <strong>(Exit 34): xx errors during bulk transfer</strong>.
34 is Bazel's error code for Remote Error.</p>
<p>The recommended solution is to set the flag explicitly to false,
with <code>--experimental_action_cache_store_output_metadata=false</code>.
To quickly solve the issue on your local machine you can run <code>bazel clean</code>.
However, this will just push the error into the future.</p>
<p>The bug is independent of which remote cache system you use
and is tracked at <a href="https://github.com/bazelbuild/bazel/issues/17366" target="_blank" rel="noopener noreferrer">GitHub</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="background">Background<a href="https://meroton.github.io/blog/bazel-6-errors-build-without-the-bytes#background" class="hash-link" aria-label="Direct link to Background" title="Direct link to Background">​</a></h2>
<p>When performing an analysis of what to build
Bazel will ask the remote cache which items have already been built.
Bazel will only schedule build actions for items
that do not already exist in the cache.
If running a build without the bytes<sup><a href="https://meroton.github.io/blog/bazel-6-errors-build-without-the-bytes#user-content-fn-1-13c049" id="user-content-fnref-1-13c049" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>
the intermediary results will not be downloaded to the client.</p>
<p>Should the cached items be evicted
then Bazel will run into an unrecoverable error.
It wants the remote system to perform an action using inputs from the cache,
but they have disappeared.
And Bazel can not upload them,
as they were never downloaded to the client.
The build would then dutifully crash
(some work has been put into trying to
<a href="https://groups.google.com/g/bazel-dev/c/WwNN4kiYSpc" target="_blank" rel="noopener noreferrer">resolve this on the bazel side</a>
but it has not been considered a priority).</p>
<p>This puts an implicit requirement on the remote cache implementation.
Artifacts need to be saved for as long as Bazel needs them.
The problem here is that this is an undefined period of time.
Bazel will not proactively check if the item still exists,
nor in any other manner inform the cache that
it will need the item in the future.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="before-v600">Before v6.0.0<a href="https://meroton.github.io/blog/bazel-6-errors-build-without-the-bytes#before-v600" class="hash-link" aria-label="Direct link to Before v6.0.0" title="Direct link to Before v6.0.0">​</a></h2>
<p>Bazel tied the lifetime of which items already exists in the cache
(the existence cache)
to the analysis cache.
Whenever the analysis cache was purged it would also drop the existence cache.</p>
<p>The analysis cache is purged quite frequently.
It would therefore be rare in practice,
that the existence cache would be out of date.
Furthermore, since the existence cache was an in-memory cache,
Bazel crashing would forcefully evict the existence cache.
Thereby fixing the issue.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="after-v600">After v6.0.0<a href="https://meroton.github.io/blog/bazel-6-errors-build-without-the-bytes#after-v600" class="hash-link" aria-label="Direct link to After v6.0.0" title="Direct link to After v6.0.0">​</a></h2>
<p>With the
<code>--experimental_action_cache_store_output_metadata</code> flag enabled by default
the existence cache is instead committed to disk and
never dropped during normal operation.</p>
<p>This means two things:</p>
<ol>
<li>The implied requirement on the remote cache is effectively infinite.</li>
<li>Should this requirement not be met the build will fail.
And since the existence cache is committed to disk Bazel will just
fail again the next time you run it.</li>
</ol>
<p>Currently the only user-facing way of purging the existence cache
is to run <code>bazel clean</code>.
Which is generally considered an anti-pattern.</p>
<p>If you are using the <a href="https://github.com/buildbarn/bb-clientd#-to-perform-remote-builds-without-the-bytes" target="_blank" rel="noopener noreferrer">bb-clientd</a> <code>--remote_output_service</code>
to run builds without the bytes
(an alternative strategy to <code>--remote_download_minimal</code>)
this will not affect you.</p>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://meroton.github.io/blog/bazel-6-errors-build-without-the-bytes#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-13c049">
<p>When using Bazel with remote execution
remote builds are run in a remote server cluster.
There is therefore no need for each developer
to download the partial results of build.
Bazel calls this feature
<a href="https://blog.bazel.build/2019/05/07/builds-without-bytes.html" target="_blank" rel="noopener noreferrer">Remote Builds Without the Bytes</a>.
The progress of the feature can be tracked at
<a href="https://github.com/bazelbuild/bazel/issues/6862" target="_blank" rel="noopener noreferrer">GitHub</a>. <a href="https://meroton.github.io/blog/bazel-6-errors-build-without-the-bytes#user-content-fnref-1-13c049" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <author>
            <name>Benjamin Ingberg</name>
        </author>
        <category label="bazel" term="bazel"/>
        <category label="bugs" term="bugs"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBar at the Meroton Office]]></title>
        <id>https://meroton.github.io/blog/buildbar-at-meroton-office</id>
        <link href="https://meroton.github.io/blog/buildbar-at-meroton-office"/>
        <updated>2022-11-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[After BazelCon we've all gotten a bit giddy and you might feel excited how the information presented at BazelCon might impact your development workflow.]]></summary>
        <content type="html"><![CDATA[<p>After BazelCon we've all gotten a bit giddy and you might feel excited how the information presented at BazelCon might impact your development workflow.
For that purpose we're inviting everyone in the wider bazel community to an open BuildBar at the Meroton offices.</p>
<p>Come over and digest BazelCon with high level technical discussions of the talks,
great company, a pleasant atmosphere and also beer.</p>
<p>Feel welcome to come over this Thursday the first of December from 16 to 20.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="directions">Directions<a href="https://meroton.github.io/blog/buildbar-at-meroton-office#directions" class="hash-link" aria-label="Direct link to Directions" title="Direct link to Directions">​</a></h2>
<p>You'll find us at our Linköping offices at Fridtunagatan 33. Currently there is some construction but follow the red lines and you'll be fine.</p>
<figure><img alt="" src="https://meroton.github.io/img/office_map.webp"><figcaption>Fridtunagatan 33 Linköping</figcaption></figure>]]></content>
        <author>
            <name>Benjamin Ingberg</name>
        </author>
        <category label="meroton" term="meroton"/>
        <category label="afterwork" term="afterwork"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Remote Executors for the Free Environment]]></title>
        <id>https://meroton.github.io/blog/remote-executors-for-free-tier</id>
        <link href="https://meroton.github.io/blog/remote-executors-for-free-tier"/>
        <updated>2022-10-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We've performed some updates to the free tier and our pricing model.]]></summary>
        <content type="html"><![CDATA[<p>We've performed some updates to the free tier and our pricing model.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="shared-cache">Shared Cache<a href="https://meroton.github.io/blog/remote-executors-for-free-tier#shared-cache" class="hash-link" aria-label="Direct link to Shared Cache" title="Direct link to Shared Cache">​</a></h2>
<p>The free tier has been upgraded into an environment with a 1TB cache.
This means that you can use the free tier without worrying about hitting any limits or setup process.</p>
<p>Do note that while the cached items will only be accessible with the correct api keys,
the storage area can be reclaimed by anyone.
I.e. as the cache becomes full your items might be dropped.</p>
<p>With the current churn we expect any items in the cache last at least a week.
However, you should always treat items in the cache as something which might be dropped at any moment.
The purpose and design of the cache is to maximize build performance, not to provide storage.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="shared-executors">Shared executors<a href="https://meroton.github.io/blog/remote-executors-for-free-tier#shared-executors" class="hash-link" aria-label="Direct link to Shared executors" title="Direct link to Shared executors">​</a></h2>
<p>New for the free environment is the introduction of remote execution,
this was previously only available for paying customers.</p>
<p>If you're using bazel you can simply add the <code>--remote_executor=&lt;...&gt;</code> flag and your builds will be done remotely.</p>
<p>The free environment has access to 64 shared executors.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="starter-tier">Starter tier<a href="https://meroton.github.io/blog/remote-executors-for-free-tier#starter-tier" class="hash-link" aria-label="Direct link to Starter tier" title="Direct link to Starter tier">​</a></h2>
<p>If you need dedicated storage for evaluation purposes we also offer a starter tier.
The starter tier is a streamlined environment with 100 GB of dedicated cache and access to the same 64 executors as the free tier.</p>
<p>This allows you to try out remote execution and caching without being disturbed by others.
While the 100GB dedicated cache will only be used by you and therefore not be overwritten by anyone else's build,
the cache is still a cache and the system will still drop the cache entries if it determines it is useful for maximizing performance.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="need-more-executors">Need more executors?<a href="https://meroton.github.io/blog/remote-executors-for-free-tier#need-more-executors" class="hash-link" aria-label="Direct link to Need more executors?" title="Direct link to Need more executors?">​</a></h2>
<p>At the moment the starter tier has a fixed amount of shared executors.
If you need a scalable solution contact us for setting up a custom Buildbarn environment of any size.</p>]]></content>
        <author>
            <name>Benjamin Ingberg</name>
        </author>
        <category label="meroton" term="meroton"/>
        <category label="remote execution" term="remote execution"/>
        <category label="cloud" term="cloud"/>
        <category label="free tier" term="free tier"/>
        <category label="starter tier" term="starter tier"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tips, Tricks & Non-Deterministic Builds]]></title>
        <id>https://meroton.github.io/blog/tips-trix-and-nondeterminism</id>
        <link href="https://meroton.github.io/blog/tips-trix-and-nondeterminism"/>
        <updated>2022-08-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[When you have a remote build and cache cluster it can sometimes be hard to track down what exactly is using all of your building resources. To help with this we have started a tips and trix section in the documentation where we will share methods we use to debug and resolve slow builds.]]></summary>
        <content type="html"><![CDATA[<p>When you have a remote build and cache cluster it can sometimes be hard to track down what exactly is using all of your building resources. To help with this we have started a tips and trix section in the documentation where we will share methods we use to debug and resolve slow builds.</p>
<p>The first section is about build non-determinism. Ideally your build actions should produce the same output when run with the same input, in practice this is sometimes not the case. If you are lucky a non-deterministic action won't be noticed since the inputs for the non-deterministic action is unchanged it won't be rebuilt.</p>
<p>If you're not so lucky the non-determinism stems from a bug in the implementation and you should definitiely pay attention to them. But how do you know which if any actions are non-deterministic?</p>
<p>This is not trivial but we have added <a href="https://meroton.github.io/docs/tips/non-deterministic-builds/">a server side feature</a> which allows detection of non-determinism with virtually no effort on your part.</p>
<p>Once activated it reruns a configured fraction of your actions and automatically flags them if they produce different outputs. The scheduling is done outside of your bazel invocation so your build throughput will be unaffected at the cost of an increase in the number of resources consumed. We suggest 1% which will only increase your resource use by a trivial amount but you could of course set it to 100% which would double the cost of your builds.</p>]]></content>
        <author>
            <name>Benjamin Ingberg</name>
        </author>
        <category label="meroton" term="meroton"/>
        <category label="bazel" term="bazel"/>
        <category label="optimizing" term="optimizing"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Updates to Buildbarn deployment repo as of April 2022]]></title>
        <id>https://meroton.github.io/blog/bb-deploy-updates-2022-04</id>
        <link href="https://meroton.github.io/blog/bb-deploy-updates-2022-04"/>
        <updated>2022-05-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The sample configuration project for Buildbarn was recently updated after a long hiatus. As an aid for people to understand which changes have been done see the following high level summary.]]></summary>
        <content type="html"><![CDATA[<p>The <a href="https://github.com/buildbarn/bb-deployments" target="_blank" rel="noopener noreferrer">sample configuration project for Buildbarn</a> was recently updated after a long hiatus. As an aid for people to understand which changes have been done see the following high level summary.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="april-2022-updates">April 2022 Updates<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04#april-2022-updates" class="hash-link" aria-label="Direct link to April 2022 Updates" title="Direct link to April 2022 Updates">​</a></h2>
<p>This includes updates to Buildbarn since December 2020.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="authorizer-overhaul">Authorizer Overhaul<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04#authorizer-overhaul" class="hash-link" aria-label="Direct link to Authorizer Overhaul" title="Direct link to Authorizer Overhaul">​</a></h3>
<p>Authorizers have been rehauled to be more flexible it is now part of each individual cache and execution configuration.</p>
<p>Using a JWT authorization bearer token has been added as an authorization method.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="hierarchical-blob-access">Hierarchical Blob Access<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04#hierarchical-blob-access" class="hash-link" aria-label="Direct link to Hierarchical Blob Access" title="Direct link to Hierarchical Blob Access">​</a></h3>
<p>Using hierarchical blob access allows blobs in instance name <code>foo/bar</code> to be accessed from instance <code>foo/bar/baz</code> but not instance <code>foo</code> or <code>foo/qux</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="action-result-expiration">Action Result Expiration<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04#action-result-expiration" class="hash-link" aria-label="Direct link to Action Result Expiration" title="Direct link to Action Result Expiration">​</a></h3>
<p>An expiry can be added to action result which lets the action cache purge the result of an exection that was performed too far in the past. This can be used to ensure that all targets are rebuilt periodically even if they are accessed frequently enough to not normally be purged from the cache.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="read-only-cache-replicas">Read Only Cache Replicas<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04#read-only-cache-replicas" class="hash-link" aria-label="Direct link to Read Only Cache Replicas" title="Direct link to Read Only Cache Replicas">​</a></h3>
<p>Cache read traffic can now be sent to a read-only replica which is periodically probed for availability.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="concurrency-limiting-blob-replication">Concurrency Limiting Blob Replication<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04#concurrency-limiting-blob-replication" class="hash-link" aria-label="Direct link to Concurrency Limiting Blob Replication" title="Direct link to Concurrency Limiting Blob Replication">​</a></h3>
<p>Limit the number of concurrent replications to prevent network starvation</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="run-commands-as-another-user">Run Commands as Another User<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04#run-commands-as-another-user" class="hash-link" aria-label="Direct link to Run Commands as Another User" title="Direct link to Run Commands as Another User">​</a></h3>
<p>Allows the commands to be run as a different user, on most platforms this means the bb-runner instance must run as root.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="size-class-analysis">Size Class Analysis<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04#size-class-analysis" class="hash-link" aria-label="Direct link to Size Class Analysis" title="Direct link to Size Class Analysis">​</a></h3>
<p>Allows executors of different size classes to be used, the scheduler will attempt to utilize executors efficiently but there is an inherent tradeof between throughput and latency. Once configured the scheduler will automatically attempt to keep track of which actions are best run on which executors.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="execution-routing-policy">Execution Routing Policy<a href="https://meroton.github.io/blog/bb-deploy-updates-2022-04#execution-routing-policy" class="hash-link" aria-label="Direct link to Execution Routing Policy" title="Direct link to Execution Routing Policy">​</a></h3>
<p>The scheduler accepts an execution routing policy configuration that allows it to determine how to defer builds to different executors.</p>
<p>If you see any other changes you feel should get a mention feel free to submit a pull request at github using the link below.</p>]]></content>
        <author>
            <name>Benjamin Ingberg</name>
        </author>
        <category label="release" term="release"/>
        <category label="buildbarn" term="buildbarn"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Purpose of the Articles]]></title>
        <id>https://meroton.github.io/blog/about</id>
        <link href="https://meroton.github.io/blog/about"/>
        <updated>2022-02-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The purpose of these articles is to have a freeform area discussing ideas, technical issues, solutions and news in an indepth relaxed manner. It is not to serve as reference material, structured reference material should be available in the documentation section.]]></summary>
        <content type="html"><![CDATA[<p>The purpose of these articles is to have a freeform area discussing ideas, technical issues, solutions and news in an indepth relaxed manner. It is not to serve as reference material, structured reference material should be available in the documentation section.</p>
<p>The article format allows more in depth on discussions for reacurring subjects. In contrast to the documentation published articles aren't changed, if the subject requires a revisit in the future then we publish a new post and add references to the old.</p>
<p>If you see any errors feel free to submit a pull request at github using the link below.</p>]]></content>
        <author>
            <name>Benjamin Ingberg</name>
        </author>
        <category label="meroton" term="meroton"/>
    </entry>
</feed>